<scope ilk="blob" lang="PHP" name="System.php" src="/usr/share/php/System.php"><import line="20" module="PEAR.php" /><import line="21" module="Console/Getopt.php" /><scope doc="System offers cross plattform compatible system functions&#xA;&#xA;Static functions for different operations. Should work under&#xA;Unix and Windows. The names and usage has been taken from its respectively&#xA;GNU commands. The functions will return (bool) false on error and will&#xA;trigger the error with the PHP trigger_error() function (you can silence&#xA;the error by prefixing a &apos;@&apos; sign after the function call, but this&#xA;is not recommended practice.  Instead use an error handler with&#xA;{@link set_error_handler()}).&#xA;&#xA;Documentation on this class you can find in:&#xA;http://pear.php.net/manual/&#xA;&#xA;Example usage:&#xA;if (!@System::rm(&apos;-r file1 dir1&apos;)) {&#xA;   print &quot;could not delete file1 or dir1&quot;;&#xA;}&#xA;&#xA;In case you need to to pass file names with spaces,&#xA;pass the params as an array:&#xA;&#xA;System::rm(array(&apos;-r&apos;, $file1, $dir1));&#xA;&#xA;@category   pear&#xA;@package    System&#xA;@author     Tomas V.V. Cox &lt;cox@idecnet.com&gt;&#xA;@copyright  1997-2006 The PHP Group&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 0.1&#xA;@static" ilk="class" line="59" lineend="629" name="System"><scope doc="returns the commandline arguments of a function&#xA;&#xA;@param    string  $argv           the commandline&#xA;@param    string  $short_options  the allowed option short-tags&#xA;@param    string  $long_options   the allowed option long-tags&#xA;@return   array   the given options and there values&#xA;@static&#xA;@access private" ilk="function" line="71" lineend="85" name="_parseArgs" returns="array" signature="array _parseArgs(string $argv, string $short_options, string $long_options = null)"><variable citdl="string" ilk="argument" line="71" name="argv" /><variable citdl="string" ilk="argument" line="71" name="short_options" /><variable citdl="string" default="null" ilk="argument" line="71" name="long_options" /><variable attributes="__not_yet_defined__" line="77" name="a" /><variable line="77" name="k" /><variable attributes="__not_yet_defined__" line="77" name="av" /></scope><scope doc="Output errors with PHP trigger_error(). You can silence the errors&#xA;with prefixing a &quot;@&quot; sign to the function call: @System::mkdir(..);&#xA;&#xA;@param mixed $error a PEAR error or a string with the error message&#xA;@return bool false&#xA;@static&#xA;@access private" ilk="function" line="96" lineend="103" name="raiseError" returns="bool" signature="bool raiseError(mixed $error)"><variable citdl="mixed" ilk="argument" line="96" name="error" /></scope><scope doc="Creates a nested array representing the structure of a directory&#xA;&#xA;System::_dirToStruct(&apos;dir1&apos;, 0) =&gt;&#xA;  Array&#xA;   (&#xA;   [dirs] =&gt; Array&#xA;       (&#xA;           [0] =&gt; dir1&#xA;       )&#xA;&#xA;   [files] =&gt; Array&#xA;       (&#xA;           [0] =&gt; dir1/file2&#xA;           [1] =&gt; dir1/file3&#xA;       )&#xA;   )&#xA;@param    string  $sPath      Name of the directory&#xA;@param    integer $maxinst    max. deep of the lookup&#xA;@param    integer $aktinst    starting deep of the lookup&#xA;@param    bool    $silent     if true, do not emit errors.&#xA;@return   array   the structure of the dir&#xA;@static&#xA;@access   private" ilk="function" line="130" lineend="163" name="_dirToStruct" returns="array" signature="array _dirToStruct(string $sPath, integer $maxinst, integer $aktinst = 0, bool $silent = false)"><variable citdl="string" ilk="argument" line="130" name="sPath" /><variable citdl="integer" ilk="argument" line="130" name="maxinst" /><variable citdl="integer" default="0" ilk="argument" line="130" name="aktinst" /><variable citdl="bool" default="false" ilk="argument" line="130" name="silent" /><variable citdl="System._dirToStruct()" line="154" name="tmp" /><variable citdl="array()" line="132" name="struct" /><variable attributes="__not_yet_defined__" line="151" name="val" /><variable citdl="array()" line="141" name="list" /><variable line="142" name="file" /><variable citdl="sPath" line="152" name="path" /><variable line="133" name="dir" /></scope><scope doc="Creates a nested array representing the structure of a directory and files&#xA;&#xA;@param    array $files Array listing files and dirs&#xA;@return   array&#xA;@static&#xA;@see System::_dirToStruct()" ilk="function" line="173" lineend="188" name="_multipleToStruct" returns="array" signature="array _multipleToStruct(array $files)"><variable citdl="array" ilk="argument" line="173" name="files" /><variable citdl="System._dirToStruct()" line="179" name="tmp" /><variable citdl="array()" line="175" name="struct" /><variable attributes="__not_yet_defined__" line="177" name="file" /></scope><scope doc="The rm command for removing files.&#xA;Supports multiple files and dirs and also recursive deletes&#xA;&#xA;@param    string  $args   the arguments for rm&#xA;@return   mixed   PEAR_Error or true for success&#xA;@static&#xA;@access   public" ilk="function" line="199" lineend="234" name="rm" returns="mixed" signature="mixed rm(string $args)"><variable citdl="string" ilk="argument" line="199" name="args" /><variable attributes="__not_yet_defined__" line="205" name="opt" /><variable citdl="System._multipleToStruct()" line="212" name="struct" /><variable attributes="__not_yet_defined__" line="220" name="dir" /><variable citdl="boolean" line="207" name="do_recursive" /><variable citdl="boolean" line="210" name="ret" /><variable attributes="__not_yet_defined__" line="213" name="file" /><variable citdl="System._parseArgs()" line="201" name="opts" /><variable line="227" name="delete" /></scope><scope doc="Make directories.&#xA;&#xA;The -p option will create parent directories&#xA;@param    string  $args    the name of the director(y|ies) to create&#xA;@return   bool    True for success&#xA;@static&#xA;@access   public" ilk="function" line="245" lineend="299" name="mkDir" returns="bool" signature="bool mkDir(string $args)"><variable citdl="string" ilk="argument" line="245" name="args" /><variable attributes="__not_yet_defined__" line="253" name="opt" /><variable citdl="array()" line="272" name="dirstack" /><variable citdl="boolean" line="255" name="create_parents" /><variable citdl="boolean" line="269" name="ret" /><variable line="279" name="newdir" /><variable citdl="int" line="252" name="mode" /><variable citdl="System._parseArgs()" line="247" name="opts" /><variable attributes="__not_yet_defined__" citdl="dirname()" line="271" name="dir" /></scope><scope doc="Concatenate files&#xA;&#xA;Usage:&#xA;1) $var = System::cat(&apos;sample.txt test.txt&apos;);&#xA;2) System::cat(&apos;sample.txt test.txt &gt; final.txt&apos;);&#xA;3) System::cat(&apos;sample.txt test.txt &gt;&gt; final.txt&apos;);&#xA;&#xA;Note: as the class use fopen, urls should work also (test that)&#xA;&#xA;@param    string  $args   the arguments&#xA;@return   boolean true on success&#xA;@static&#xA;@access   public" ilk="function" line="316" lineend="364" name="cat" returns="boolean" signature="boolean &amp;cat(string $args)"><variable citdl="string" ilk="argument" line="316" name="args" /><variable citdl="array()" line="319" name="files" /><variable citdl="args" line="328" name="outputfile" /><variable line="351" name="cont" /><variable citdl="System.raiseError()" line="341" name="err" /><variable line="325" name="i" /><variable citdl="boolean" line="318" name="ret" /><variable line="347" name="fd" /><variable citdl="count()" line="324" name="count_args" /><variable attributes="__not_yet_defined__" line="346" name="file" /><variable citdl="boolean" line="338" name="outputfd" /><variable citdl="string" line="327" name="mode" /></scope><scope doc="Creates temporary files or directories. This function will remove&#xA;the created files when the scripts finish its execution.&#xA;&#xA;Usage:&#xA;  1) $tempfile = System::mktemp(&quot;prefix&quot;);&#xA;  2) $tempdir  = System::mktemp(&quot;-d prefix&quot;);&#xA;  3) $tempfile = System::mktemp();&#xA;  4) $tempfile = System::mktemp(&quot;-t /var/tmp prefix&quot;);&#xA;&#xA;prefix -&gt; The string that will be prepended to the temp name&#xA;          (defaults to &quot;tmp&quot;).&#xA;-d     -&gt; A temporary dir will be created instead of a file.&#xA;-t     -&gt; The target dir where the temporary (file|dir) will be created. If&#xA;          this param is missing by default the env vars TMP on Windows or&#xA;          TMPDIR in Unix will be used. If these vars are also missing&#xA;          c:\windows\temp or /tmp will be used.&#xA;&#xA;@param   string  $args  The arguments&#xA;@return  mixed   the full path of the created (file|dir) or false&#xA;@see System::tmpdir()&#xA;@static&#xA;@access  public" ilk="function" line="390" lineend="434" name="mktemp" returns="mixed" signature="mixed mktemp(string $args = null)"><variable citdl="string" default="null" ilk="argument" line="390" name="args" /><variable attributes="__not_yet_defined__" line="398" name="opt" /><variable citdl="tempnam()" line="415" name="tmp" /><variable citdl="boolean" line="400" name="tmp_is_dir" /><variable line="406" name="prefix" /><variable citdl="System._parseArgs()" line="393" name="opts" /><variable attributes="__not_yet_defined__" citdl="boolean" line="428" name="first_time" /><variable citdl="opt" line="402" name="tmpdir" /></scope><variable attributes="static" citdl="boolean" line="392" name="first_time" /><scope doc="Remove temporary files created my mkTemp. This function is executed&#xA;at script shutdown time&#xA;&#xA;@static&#xA;@access private" ilk="function" line="443" lineend="451" name="_removeTmpFiles" signature="_removeTmpFiles()"><variable attributes="__not_yet_defined__" line="445" name="GLOBALS" /><variable citdl="GLOBALS" line="446" name="delete" /></scope><scope doc="Get the path of the temporal directory set in the system&#xA;by looking in its environments variables.&#xA;Note: php.ini-recommended removes the &quot;E&quot; from the variables_order setting,&#xA;making unavaible the $_ENV array, that s why we do tests with _ENV&#xA;&#xA;@static&#xA;@return string The temporary directory on the system" ilk="function" line="462" lineend="483" name="tmpdir" returns="string" signature="string tmpdir()"><variable line="465" name="var" /><variable attributes="__not_yet_defined__" line="465" name="_ENV" /></scope><scope doc="The &quot;which&quot; command (show the full path of a command)&#xA;&#xA;@param string $program The command to search for&#xA;@param mixed  $fallback Value to return if $program is not found&#xA;&#xA;@return mixed A string with the full path or false if not found&#xA;@static&#xA;@author Stig Bakken &lt;ssb@php.net&gt;" ilk="function" line="495" lineend="541" name="which" returns="mixed" signature="mixed which(string $program, mixed $fallback = false)"><variable citdl="string" ilk="argument" line="495" name="program" /><variable citdl="mixed" default="false" ilk="argument" line="495" name="fallback" /><variable attributes="__not_yet_defined__" line="532" name="suff" /><variable citdl="getenv()" line="520" name="exe_suffixes" /><variable citdl="explode()" line="514" name="path_elements" /><variable citdl="dir" line="534" name="file" /><variable citdl="string" line="526" name="pear_is_executable" /><variable citdl="getenv()" line="508" name="path" /><variable attributes="__not_yet_defined__" line="533" name="dir" /></scope><scope doc="The &quot;find&quot; command&#xA;&#xA;Usage:&#xA;&#xA;System::find($dir);&#xA;System::find(&quot;$dir -type d&quot;);&#xA;System::find(&quot;$dir -type f&quot;);&#xA;System::find(&quot;$dir -name *.php&quot;);&#xA;System::find(&quot;$dir -name *.php -name *.htm*&quot;);&#xA;System::find(&quot;$dir -maxdepth 1&quot;);&#xA;&#xA;Params implmented:&#xA;$dir            -&gt; Start the search at this directory&#xA;-type d         -&gt; return only directories&#xA;-type f         -&gt; return only files&#xA;-maxdepth &lt;n&gt;   -&gt; max depth of recursion&#xA;-name &lt;pattern&gt; -&gt; search pattern (bash style). Multiple -name param allowed&#xA;&#xA;@param  mixed Either array or string with the command line&#xA;@return array Array of found files&#xA;@static" ilk="function" line="567" lineend="628" name="find" returns="array" signature="array find($args)"><variable ilk="argument" line="567" name="args" /><variable citdl="path" line="607" name="files" /><variable citdl="preg_quote()" line="593" name="name" /><variable line="580" name="i" /><variable citdl="string" line="615" name="pattern" /><variable citdl="array()" line="616" name="ret" /><variable citdl="boolean" line="587" name="do_dirs" /><variable citdl="array()" line="576" name="patterns" /><variable citdl="int" line="577" name="depth" /><variable citdl="basename()" line="620" name="filepart" /><variable citdl="count()" line="617" name="files_count" /><variable citdl="System._dirToStruct()" line="605" name="path" /><variable citdl="preg_quote()" line="614" name="dsq" /><variable citdl="count()" line="579" name="args_count" /><variable citdl="realpath()" line="572" name="dir" /><variable citdl="do_dirs" line="578" name="do_files" /></scope></scope></scope>