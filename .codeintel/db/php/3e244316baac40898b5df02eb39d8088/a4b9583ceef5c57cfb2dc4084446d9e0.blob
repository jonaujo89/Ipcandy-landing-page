<scope ilk="blob" lang="PHP" name="Tar.php" src="/usr/share/php/Archive/Tar.php"><import line="43" module="PEAR.php" /><variable citdl="int" ilk="constant" line="46" name="ARCHIVE_TAR_ATT_SEPARATOR" /><variable citdl="pack()" ilk="constant" line="47" name="ARCHIVE_TAR_END_BLOCK" /><scope classrefs="PEAR" doc="Creates a (compressed) Tar archive&#xA;&#xA;@author   Vincent Blavet &lt;vincent@phpconcept.net&gt;&#xA;@version  $Revision: 295988 $&#xA;@license  http://www.opensource.org/licenses/bsd-license.php New BSD License&#xA;@package  Archive_Tar" ilk="class" line="57" lineend="1908" name="Archive_Tar"><variable citdl="string" doc="@var string Name of the Tar" line="62" name="_tarname" /><variable citdl="boolean" doc="@var boolean if true, the Tar file will be gzipped" line="67" name="_compress" /><variable citdl="string" doc="@var string Type of compression : &apos;none&apos;, &apos;gz&apos; or &apos;bz2&apos;" line="72" name="_compress_type" /><variable citdl="string" doc="@var string Explode separator" line="77" name="_separator" /><variable citdl="file" doc="@var file descriptor" line="82" name="_file" /><variable citdl="string" doc="@var string Local Tar name of a remote Tar (http:// or ftp://)" line="87" name="_temp_tarname" /><variable citdl="string" doc="@var string regular expression for ignoring files or directories" line="92" name="_ignore_regexp" /><scope attributes="__ctor__" doc="Archive_Tar Class constructor. This flavour of the constructor only&#xA;declare a new Archive_Tar object, identifying it by the name of the&#xA;tar file.&#xA;If the compress argument is set the tar will be read or created as a&#xA;gzip or bz2 compressed TAR file.&#xA;&#xA;@param    string  $p_tarname  The name of the tar archive to create&#xA;@param    string  $p_compress can be null, &apos;gz&apos; or &apos;bz2&apos;. This&#xA;                  parameter indicates if gzip or bz2 compression&#xA;                  is required.  For compatibility reason the&#xA;                  boolean value &apos;true&apos; means &apos;gz&apos;.&#xA;@access public" ilk="function" line="109" lineend="171" name="Archive_Tar" returns="boolean" signature="Archive_Tar(string $p_tarname, string $p_compress = null)"><variable citdl="string" ilk="argument" line="109" name="p_tarname" /><variable citdl="string" default="null" ilk="argument" line="109" name="p_compress" /><variable line="116" name="fp" /><variable citdl="fread()" line="118" name="data" /><variable line="156" name="extname" /></scope><scope doc="{{{ destructor" ilk="function" line="175" lineend="182" name="_Archive_Tar" signature="_Archive_Tar()" /><scope doc="This method creates the archive file and add the files / directories&#xA;that are listed in $p_filelist.&#xA;If a file with the same name exist and is writable, it is replaced&#xA;by the new tar.&#xA;The method return false and a PEAR error text.&#xA;The $p_filelist parameter can be an array of string, each string&#xA;representing a filename or a directory name with their path if&#xA;needed. It can also be a single string with names separated by a&#xA;single blank.&#xA;For each directory added in the archive, the files and&#xA;sub-directories are also added.&#xA;See also createModify() method for more details.&#xA;&#xA;@param array  $p_filelist An array of filenames and directory names, or a&#xA;                          single string with names separated by a single&#xA;                          blank space.&#xA;@return                   true on success, false on error.&#xA;@see createModify()&#xA;@access public" ilk="function" line="207" lineend="210" name="create" returns="true" signature="true create(array $p_filelist)"><variable citdl="array" ilk="argument" line="207" name="p_filelist" /></scope><scope doc="This method add the files / directories that are listed in $p_filelist in&#xA;the archive. If the archive does not exist it is created.&#xA;The method return false and a PEAR error text.&#xA;The files and directories listed are only added at the end of the archive,&#xA;even if a file with the same name is already archived.&#xA;See also createModify() method for more details.&#xA;&#xA;@param array  $p_filelist An array of filenames and directory names, or a&#xA;                          single string with names separated by a single&#xA;                          blank space.&#xA;@return                   true on success, false on error.&#xA;@see createModify()&#xA;@access public" ilk="function" line="229" lineend="232" name="add" returns="true" signature="true add(array $p_filelist)"><variable citdl="array" ilk="argument" line="229" name="p_filelist" /></scope><scope doc="{{{ extract()" ilk="function" line="236" lineend="239" name="extract" returns="this.extractModify()" signature="extract($p_path = &apos;&apos;)"><variable default="&apos;&apos;" ilk="argument" line="236" name="p_path" /></scope><scope doc="{{{ listContent()" ilk="function" line="243" lineend="256" name="listContent" returns="v_list_detail" signature="listContent()"><variable citdl="array()" line="245" name="v_list_detail" /></scope><scope doc="This method creates the archive file and add the files / directories&#xA;that are listed in $p_filelist.&#xA;If the file already exists and is writable, it is replaced by the&#xA;new tar. It is a create and not an add. If the file exists and is&#xA;read-only or is a directory it is not replaced. The method return&#xA;false and a PEAR error text.&#xA;The $p_filelist parameter can be an array of string, each string&#xA;representing a filename or a directory name with their path if&#xA;needed. It can also be a single string with names separated by a&#xA;single blank.&#xA;The path indicated in $p_remove_dir will be removed from the&#xA;memorized path of each file / directory listed when this path&#xA;exists. By default nothing is removed (empty path &apos;&apos;)&#xA;The path indicated in $p_add_dir will be added at the beginning of&#xA;the memorized path of each file / directory listed. However it can&#xA;be set to empty &apos;&apos;. The adding of a path is done after the removing&#xA;of path.&#xA;The path add/remove ability enables the user to prepare an archive&#xA;for extraction in a different path than the origin files are.&#xA;See also addModify() method for file adding properties.&#xA;&#xA;@param array  $p_filelist     An array of filenames and directory names,&#xA;                              or a single string with names separated by&#xA;                              a single blank space.&#xA;@param string $p_add_dir      A string which contains a path to be added&#xA;                              to the memorized path of each element in&#xA;                              the list.&#xA;@param string $p_remove_dir   A string which contains a path to be&#xA;                              removed from the memorized path of each&#xA;                              element in the list, when relevant.&#xA;@return boolean               true on success, false on error.&#xA;@access public&#xA;@see addModify()" ilk="function" line="295" lineend="323" name="createModify" returns="boolean" signature="boolean createModify(array $p_filelist, string $p_add_dir, string $p_remove_dir = &apos;&apos;)"><variable citdl="array" ilk="argument" line="295" name="p_filelist" /><variable citdl="string" ilk="argument" line="295" name="p_add_dir" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="295" name="p_remove_dir" /><variable citdl="boolean" line="297" name="v_result" /><variable line="303" name="v_list" /></scope><scope doc="This method add the files / directories listed in $p_filelist at the&#xA;end of the existing archive. If the archive does not yet exists it&#xA;is created.&#xA;The $p_filelist parameter can be an array of string, each string&#xA;representing a filename or a directory name with their path if&#xA;needed. It can also be a single string with names separated by a&#xA;single blank.&#xA;The path indicated in $p_remove_dir will be removed from the&#xA;memorized path of each file / directory listed when this path&#xA;exists. By default nothing is removed (empty path &apos;&apos;)&#xA;The path indicated in $p_add_dir will be added at the beginning of&#xA;the memorized path of each file / directory listed. However it can&#xA;be set to empty &apos;&apos;. The adding of a path is done after the removing&#xA;of path.&#xA;The path add/remove ability enables the user to prepare an archive&#xA;for extraction in a different path than the origin files are.&#xA;If a file/dir is already in the archive it will only be added at the&#xA;end of the archive. There is no update of the existing archived&#xA;file/dir. However while extracting the archive, the last file will&#xA;replace the first one. This results in a none optimization of the&#xA;archive size.&#xA;If a file/dir does not exist the file/dir is ignored. However an&#xA;error text is send to PEAR error.&#xA;If a file/dir is not readable the file/dir is ignored. However an&#xA;error text is send to PEAR error.&#xA;&#xA;@param array      $p_filelist     An array of filenames and directory&#xA;                                  names, or a single string with names&#xA;                                  separated by a single blank space.&#xA;@param string     $p_add_dir      A string which contains a path to be&#xA;                                  added to the memorized path of each&#xA;                                  element in the list.&#xA;@param string     $p_remove_dir   A string which contains a path to be&#xA;                                  removed from the memorized path of&#xA;                                  each element in the list, when&#xA;                                  relevant.&#xA;@return                           true on success, false on error.&#xA;@access public" ilk="function" line="367" lineend="388" name="addModify" returns="true" signature="true addModify(array $p_filelist, string $p_add_dir, string $p_remove_dir = &apos;&apos;)"><variable citdl="array" ilk="argument" line="367" name="p_filelist" /><variable citdl="string" ilk="argument" line="367" name="p_add_dir" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="367" name="p_remove_dir" /><variable citdl="boolean" line="369" name="v_result" /><variable line="375" name="v_list" /></scope><scope doc="This method add a single string as a file at the&#xA;end of the existing archive. If the archive does not yet exists it&#xA;is created.&#xA;&#xA;@param string     $p_filename     A string which contains the full&#xA;                                  filename path that will be associated&#xA;                                  with the string.&#xA;@param string     $p_string       The content of the file added in&#xA;                                  the archive.&#xA;@return                           true on success, false on error.&#xA;@access public" ilk="function" line="405" lineend="427" name="addString" returns="true" signature="true addString(string $p_filename, string $p_string)"><variable citdl="string" ilk="argument" line="405" name="p_filename" /><variable citdl="string" ilk="argument" line="405" name="p_string" /><variable citdl="boolean" line="407" name="v_result" /></scope><scope doc="This method extract all the content of the archive in the directory&#xA;indicated by $p_path. When relevant the memorized path of the&#xA;files/dir can be modified by removing the $p_remove_path path at the&#xA;beginning of the file/dir path.&#xA;While extracting a file, if the directory path does not exists it is&#xA;created.&#xA;While extracting a file, if the file already exists it is replaced&#xA;without looking for last modification date.&#xA;While extracting a file, if the file already exists and is write&#xA;protected, the extraction is aborted.&#xA;While extracting a file, if a directory with the same name already&#xA;exists, the extraction is aborted.&#xA;While extracting a directory, if a file with the same name already&#xA;exists, the extraction is aborted.&#xA;While extracting a file/directory if the destination directory exist&#xA;and is write protected, or does not exist but can not be created,&#xA;the extraction is aborted.&#xA;If after extraction an extracted file does not show the correct&#xA;stored file size, the extraction is aborted.&#xA;When the extraction is aborted, a PEAR error text is set and false&#xA;is returned. However the result can be a partial extraction that may&#xA;need to be manually cleaned.&#xA;&#xA;@param string $p_path         The path of the directory where the&#xA;                              files/dir need to by extracted.&#xA;@param string $p_remove_path  Part of the memorized path that can be&#xA;                              removed if present at the beginning of&#xA;                              the file/dir path.&#xA;@return boolean               true on success, false on error.&#xA;@access public&#xA;@see extractList()" ilk="function" line="464" lineend="476" name="extractModify" returns="boolean" signature="boolean extractModify(string $p_path, string $p_remove_path)"><variable citdl="string" ilk="argument" line="464" name="p_path" /><variable citdl="string" ilk="argument" line="464" name="p_remove_path" /><variable citdl="boolean" line="466" name="v_result" /><variable citdl="array()" line="467" name="v_list_detail" /></scope><scope doc="This method extract from the archive one file identified by $p_filename.&#xA;The return value is a string with the file content, or NULL on error.&#xA;@param string $p_filename     The path of the file to extract in a string.&#xA;@return                       a string with the file content or NULL.&#xA;@access public" ilk="function" line="487" lineend="497" name="extractInString" returns="a" signature="a extractInString(string $p_filename)"><variable citdl="string" ilk="argument" line="487" name="p_filename" /><variable citdl="this._extractInString()" line="490" name="v_result" /></scope><scope doc="This method extract from the archive only the files indicated in the&#xA;$p_filelist. These files are extracted in the current directory or&#xA;in the directory indicated by the optional $p_path parameter.&#xA;If indicated the $p_remove_path can be used in the same way as it is&#xA;used in extractModify() method.&#xA;@param array  $p_filelist     An array of filenames and directory names,&#xA;                              or a single string with names separated&#xA;                              by a single blank space.&#xA;@param string $p_path         The path of the directory where the&#xA;                              files/dir need to by extracted.&#xA;@param string $p_remove_path  Part of the memorized path that can be&#xA;                              removed if present at the beginning of&#xA;                              the file/dir path.&#xA;@return                       true on success, false on error.&#xA;@access public&#xA;@see extractModify()" ilk="function" line="519" lineend="540" name="extractList" returns="true" signature="true extractList(array $p_filelist, string $p_path = &apos;&apos;, string $p_remove_path = &apos;&apos;)"><variable citdl="array" ilk="argument" line="519" name="p_filelist" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="519" name="p_path" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="519" name="p_remove_path" /><variable citdl="boolean" line="521" name="v_result" /><variable line="524" name="v_list" /><variable citdl="array()" line="522" name="v_list_detail" /></scope><scope doc="This method set specific attributes of the archive. It uses a variable&#xA;list of parameters, in the format attribute code + attribute values :&#xA;$arch-&gt;setAttribute(ARCHIVE_TAR_ATT_SEPARATOR, &apos;,&apos;);&#xA;@param mixed $argv            variable list of attributes and values&#xA;@return                       true on success, false on error.&#xA;@access public" ilk="function" line="552" lineend="594" name="setAttribute" returns="true" signature="true setAttribute(mixed $argv)"><variable citdl="mixed" ilk="argument" line="552" name="argv" /><variable citdl="int" line="565" name="i" /><variable citdl="boolean" line="554" name="v_result" /><variable line="557" name="v_size" /><variable citdl="func_get_args()" line="562" name="v_att_list" /></scope><scope doc="This method sets the regular expression for ignoring files and directories&#xA;at import, for example:&#xA;$arch-&gt;setIgnoreRegexp(&quot;#CVS|\.svn#&quot;);&#xA;@param string $regexp         regular expression defining which files or directories to ignore&#xA;@access public" ilk="function" line="605" lineend="608" name="setIgnoreRegexp" signature="setIgnoreRegexp(string $regexp)"><variable citdl="string" ilk="argument" line="605" name="regexp" /></scope><scope doc="This method sets the regular expression for ignoring all files and directories&#xA;matching the filenames in the array list at import, for example:&#xA;$arch-&gt;setIgnoreList(array(&apos;CVS&apos;, &apos;.svn&apos;, &apos;bin/tool&apos;));&#xA;@param array $list         a list of file or directory names to ignore&#xA;@access public" ilk="function" line="619" lineend="624" name="setIgnoreList" signature="setIgnoreList(array $list)"><variable citdl="array" ilk="argument" line="619" name="list" /><variable citdl="str_replace()" line="621" name="regexp" /></scope><scope doc="{{{ _error()" ilk="function" line="628" lineend="632" name="_error" signature="_error($p_message)"><variable ilk="argument" line="628" name="p_message" /></scope><scope doc="{{{ _warning()" ilk="function" line="636" lineend="640" name="_warning" signature="_warning($p_message)"><variable ilk="argument" line="636" name="p_message" /></scope><scope doc="{{{ _isArchive()" ilk="function" line="644" lineend="651" name="_isArchive" signature="_isArchive($p_filename = NULL)"><variable default="NULL" ilk="argument" line="644" name="p_filename" /></scope><scope doc="{{{ _openWrite()" ilk="function" line="655" lineend="674" name="_openWrite" returns="boolean" signature="_openWrite()" /><scope doc="{{{ _openRead()" ilk="function" line="678" lineend="726" name="_openRead" returns="boolean" signature="_openRead()"><variable line="685" name="v_file_from" /><variable line="697" name="v_data" /><variable line="691" name="v_file_to" /><variable citdl="this._temp_tarname" line="704" name="v_filename" /></scope><scope doc="{{{ _openReadWrite()" ilk="function" line="730" lineend="751" name="_openReadWrite" returns="boolean" signature="_openReadWrite()" /><scope doc="{{{ _close()" ilk="function" line="755" lineend="780" name="_close" returns="boolean" signature="_close()" /><scope doc="{{{ _cleanFile()" ilk="function" line="784" lineend="800" name="_cleanFile" returns="boolean" signature="_cleanFile()" /><scope doc="{{{ _writeBlock()" ilk="function" line="804" lineend="831" name="_writeBlock" returns="boolean" signature="_writeBlock($p_binary_data, $p_len = null)"><variable ilk="argument" line="804" name="p_binary_data" /><variable default="null" ilk="argument" line="804" name="p_len" /></scope><scope doc="{{{ _readBlock()" ilk="function" line="835" lineend="850" name="_readBlock" returns="v_block" signature="_readBlock()"><variable line="837" name="v_block" /></scope><scope doc="{{{ _jumpBlock()" ilk="function" line="854" lineend="875" name="_jumpBlock" returns="boolean" signature="_jumpBlock($p_len = null)"><variable default="null" ilk="argument" line="854" name="p_len" /><variable line="865" name="i" /></scope><scope doc="{{{ _writeFooter()" ilk="function" line="879" lineend="887" name="_writeFooter" returns="boolean" signature="_writeFooter()"><variable citdl="pack()" line="883" name="v_binary_data" /></scope><scope doc="{{{ _addList()" ilk="function" line="891" lineend="960" name="_addList" returns="boolean" signature="_addList($p_list, $p_add_dir, $p_remove_dir)"><variable ilk="argument" line="891" name="p_list" /><variable ilk="argument" line="891" name="p_add_dir" /><variable ilk="argument" line="891" name="p_remove_dir" /><variable line="936" name="p_hdir" /><variable citdl="array()" line="894" name="v_header" /><variable line="940" name="p_hitem" /><variable citdl="boolean" line="893" name="v_result" /><variable attributes="__not_yet_defined__" line="942" name="p_temp_list" /><variable attributes="__not_yet_defined__" line="908" name="v_filename" /></scope><scope doc="{{{ _addFile()" ilk="function" line="964" lineend="1023" name="_addFile" returns="boolean" signature="_addFile($p_filename, &amp; $p_header, $p_add_dir, $p_remove_dir)"><variable ilk="argument" line="964" name="p_filename" /><variable ilk="argument" line="964" name="p_header" /><variable ilk="argument" line="964" name="p_add_dir" /><variable ilk="argument" line="964" name="p_remove_dir" /><variable citdl="pack()" line="1010" name="v_binary_data" /><variable line="1009" name="v_buffer" /><variable citdl="p_filename" line="978" name="v_stored_filename" /><variable line="1000" name="v_file" /></scope><scope doc="{{{ _addString()" ilk="function" line="1027" lineend="1053" name="_addString" returns="boolean" signature="_addString($p_filename, $p_string)"><variable ilk="argument" line="1027" name="p_filename" /><variable ilk="argument" line="1027" name="p_string" /><variable citdl="int" line="1046" name="i" /><variable citdl="pack()" line="1048" name="v_binary_data" /><variable line="1047" name="v_buffer" /></scope><scope doc="{{{ _writeHeader()" ilk="function" line="1057" lineend="1146" name="_writeHeader" returns="boolean" signature="_writeHeader($p_filename, $p_stored_filename)"><variable ilk="argument" line="1057" name="p_filename" /><variable ilk="argument" line="1057" name="p_stored_filename" /><variable citdl="pack()" line="1139" name="v_binary_data" /><variable citdl="posix_getgrgid()" line="1097" name="groupinfo" /><variable citdl="lstat()" line="1068" name="v_info" /><variable citdl="sprintf()" line="1073" name="v_mtime" /><variable citdl="userinfo" line="1099" name="v_uname" /><variable citdl="string" line="1092" name="v_version" /><variable citdl="sprintf()" line="1080" name="v_size" /><variable citdl="string" line="1110" name="v_devminor" /><variable citdl="int" line="1123" name="v_checksum" /><variable citdl="sprintf()" line="1070" name="v_gid" /><variable citdl="string" line="1112" name="v_prefix" /><variable citdl="this._pathReduction()" line="1061" name="v_reduce_filename" /><variable citdl="posix_getpwuid()" line="1096" name="userinfo" /><variable citdl="string" line="1078" name="v_typeflag" /><variable citdl="string" line="1090" name="v_magic" /><variable citdl="string" line="1108" name="v_devmajor" /><variable citdl="sprintf()" line="1071" name="v_perms" /><variable citdl="string" line="1075" name="v_linkname" /><variable citdl="pack()" line="1116" name="v_binary_data_first" /><variable line="1125" name="i" /><variable line="1131" name="j" /><variable citdl="sprintf()" line="1069" name="v_uid" /><variable citdl="groupinfo" line="1100" name="v_gname" /><variable citdl="pack()" line="1120" name="v_binary_data_last" /></scope><scope doc="{{{ _writeHeaderBlock()" ilk="function" line="1150" lineend="1230" name="_writeHeaderBlock" returns="boolean" signature="_writeHeaderBlock($p_filename, $p_size, $p_mtime = 0, $p_perms = 0, $p_type = &apos;&apos;, $p_uid = 0, $p_gid = 0)"><variable ilk="argument" line="1150" name="p_filename" /><variable ilk="argument" line="1150" name="p_size" /><variable default="0" ilk="argument" line="1150" name="p_mtime" /><variable default="0" ilk="argument" line="1150" name="p_perms" /><variable default="&apos;&apos;" ilk="argument" line="1150" name="p_type" /><variable default="0" ilk="argument" line="1150" name="p_uid" /><variable default="0" ilk="argument" line="1150" name="p_gid" /><variable citdl="pack()" line="1223" name="v_binary_data" /><variable citdl="string" line="1174" name="v_magic" /><variable line="1215" name="j" /><variable citdl="posix_getgrgid()" line="1181" name="groupinfo" /><variable citdl="pack()" line="1204" name="v_binary_data_last" /><variable citdl="string" line="1176" name="v_version" /><variable citdl="pack()" line="1200" name="v_binary_data_first" /><variable line="1209" name="i" /><variable citdl="sprintf()" line="1167" name="v_gid" /><variable citdl="string" line="1192" name="v_devmajor" /><variable citdl="sprintf()" line="1166" name="v_uid" /><variable citdl="int" line="1207" name="v_checksum" /><variable citdl="userinfo" line="1183" name="v_uname" /><variable citdl="string" line="1196" name="v_prefix" /><variable citdl="sprintf()" line="1168" name="v_perms" /><variable citdl="groupinfo" line="1184" name="v_gname" /><variable citdl="string" line="1172" name="v_linkname" /><variable citdl="string" line="1194" name="v_devminor" /><variable citdl="sprintf()" line="1161" name="v_size" /><variable citdl="sprintf()" line="1170" name="v_mtime" /><variable citdl="posix_getpwuid()" line="1180" name="userinfo" /></scope><scope doc="{{{ _writeLongHeader()" ilk="function" line="1234" lineend="1294" name="_writeLongHeader" returns="boolean" signature="_writeLongHeader($p_filename)"><variable ilk="argument" line="1234" name="p_filename" /><variable citdl="pack()" line="1280" name="v_binary_data" /><variable citdl="string" line="1238" name="v_typeflag" /><variable line="1272" name="j" /><variable citdl="pack()" line="1261" name="v_binary_data_last" /><variable citdl="int" line="1264" name="v_checksum" /><variable citdl="string" line="1242" name="v_magic" /><variable citdl="int" line="1266" name="i" /><variable citdl="string" line="1250" name="v_devmajor" /><variable citdl="string" line="1246" name="v_uname" /><variable citdl="string" line="1254" name="v_prefix" /><variable citdl="pack()" line="1257" name="v_binary_data_first" /><variable citdl="string" line="1248" name="v_gname" /><variable line="1288" name="v_buffer" /><variable citdl="string" line="1240" name="v_linkname" /><variable citdl="sprintf()" line="1236" name="v_size" /><variable citdl="string" line="1244" name="v_version" /><variable citdl="string" line="1252" name="v_devminor" /></scope><scope doc="{{{ _readHeader()" ilk="function" line="1298" lineend="1373" name="_readHeader" returns="boolean" signature="_readHeader($v_binary_data, &amp; $v_header)"><variable ilk="argument" line="1298" name="v_binary_data" /><variable ilk="argument" line="1298" name="v_header" /><variable line="1317" name="i" /><variable citdl="unpack()" line="1329" name="v_data" /><variable citdl="int" line="1315" name="v_checksum" /></scope><scope doc="Detect and report a malicious file name&#xA;&#xA;@param string $file&#xA;@return bool&#xA;@access private" ilk="function" line="1384" lineend="1393" name="_maliciousFilename" returns="bool" signature="bool _maliciousFilename(string $file)"><variable citdl="string" ilk="argument" line="1384" name="file" /></scope><scope doc="{{{ _readLongHeader()" ilk="function" line="1397" lineend="1425" name="_readLongHeader" returns="boolean" signature="_readLongHeader(&amp; $v_header)"><variable ilk="argument" line="1397" name="v_header" /><variable line="1401" name="i" /><variable citdl="this._readBlock()" line="1402" name="v_content" /><variable citdl="string" line="1399" name="v_filename" /><variable citdl="this._readBlock()" line="1411" name="v_binary_data" /><variable citdl="floor()" line="1400" name="n" /></scope><scope doc="This method extract from the archive one file identified by $p_filename.&#xA;The return value is a string with the file content, or NULL on error.&#xA;@param string $p_filename     The path of the file to extract in a string.&#xA;@return                       a string with the file content or NULL.&#xA;@access private" ilk="function" line="1436" lineend="1477" name="_extractInString" returns="a" signature="a _extractInString(string $p_filename)"><variable citdl="string" ilk="argument" line="1436" name="p_filename" /><variable line="1461" name="i" /><variable citdl="this._readBlock()" line="1465" name="v_content" /><variable citdl="string" line="1438" name="v_result_str" /><variable attributes="__not_yet_defined__" line="1445" name="v_header" /><variable citdl="floor()" line="1460" name="n" /></scope><scope doc="{{{ _extractList()" ilk="function" line="1481" lineend="1700" name="_extractList" returns="boolean" signature="_extractList($p_path, &amp; $p_list_detail, $p_mode, $p_file_list, $p_remove_path)"><variable ilk="argument" line="1481" name="p_path" /><variable ilk="argument" line="1481" name="p_list_detail" /><variable ilk="argument" line="1481" name="p_mode" /><variable ilk="argument" line="1481" name="p_file_list" /><variable ilk="argument" line="1481" name="p_remove_path" /><variable line="1521" name="v_binary_data" /><variable line="1543" name="i" /><variable line="1686" name="v_file_dir" /><variable attributes="__not_yet_defined__" line="1529" name="v_header" /><variable citdl="int" line="1485" name="v_nb" /><variable citdl="floor()" line="1638" name="n" /><variable citdl="boolean" line="1484" name="v_result" /><variable citdl="boolean" line="1523" name="v_extract_file" /><variable citdl="boolean" line="1486" name="v_extract_all" /><variable citdl="strlen()" line="1499" name="p_remove_path_size" /><variable citdl="int" line="1524" name="v_extraction_stopped" /><variable citdl="this._readBlock()" line="1640" name="v_content" /><variable citdl="boolean" line="1487" name="v_listing" /><variable line="1633" name="v_dest_file" /><variable citdl="fileperms()" line="1654" name="mode" /></scope><scope doc="{{{ _openAppend()" ilk="function" line="1704" lineend="1789" name="_openAppend" returns="boolean" signature="_openAppend()"><variable citdl="pack()" line="1744" name="v_binary_data" /><variable line="1719" name="v_temp_tar" /><variable citdl="filesize()" line="1774" name="v_size" /><variable line="1738" name="v_buffer" /></scope><scope doc="{{{ _append()" ilk="function" line="1793" lineend="1804" name="_append" returns="boolean" signature="_append($p_filelist, $p_add_dir = &apos;&apos;, $p_remove_dir = &apos;&apos;)"><variable ilk="argument" line="1793" name="p_filelist" /><variable default="&apos;&apos;" ilk="argument" line="1793" name="p_add_dir" /><variable default="&apos;&apos;" ilk="argument" line="1793" name="p_remove_dir" /></scope><scope doc="Check if a directory exists and create it (including parent&#xA;dirs) if not.&#xA;&#xA;@param string $p_dir directory to check&#xA;&#xA;@return bool TRUE if the directory exists or was created" ilk="function" line="1817" lineend="1836" name="_dirCheck" returns="bool" signature="bool _dirCheck(string $p_dir)"><variable citdl="string" ilk="argument" line="1817" name="p_dir" /><variable citdl="dirname()" line="1823" name="p_parent_dir" /></scope><scope doc="Compress path by changing for example &quot;/dir/foo/../bar&quot; to &quot;/dir/bar&quot;,&#xA;rand emove double slashes.&#xA;&#xA;@param string $p_dir path to reduce&#xA;&#xA;@return string reduced path&#xA;&#xA;@access private" ilk="function" line="1853" lineend="1886" name="_pathReduction" returns="string" signature="string _pathReduction(string $p_dir)"><variable citdl="string" ilk="argument" line="1853" name="p_dir" /><variable citdl="int" line="1863" name="i" /><variable citdl="string" line="1855" name="v_result" /><variable citdl="explode()" line="1860" name="v_list" /></scope><scope doc="{{{ _translateWinPath()" ilk="function" line="1891" lineend="1905" name="_translateWinPath" returns="p_path" signature="_translateWinPath($p_path, $p_remove_disk_letter = true)"><variable ilk="argument" line="1891" name="p_path" /><variable default="true" ilk="argument" line="1891" name="p_remove_disk_letter" /><variable line="1895" name="v_position" /></scope></scope></scope>