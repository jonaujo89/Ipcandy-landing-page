<scope ilk="blob" lang="PHP" name="Node.php" src="/usr/share/php/Structures/Graph/Node.php"><import line="35" module="PEAR.php" /><import line="37" module="Structures/Graph.php" /><scope doc="}}}" ilk="class" line="57" lineend="341" name="Structures_Graph_Node"><variable citdl="data" line="62" name="_data" /><variable citdl="array()" line="64" name="_metadata" /><variable citdl="array()" line="66" name="_arcs" /><variable citdl="graph" line="68" name="_graph" /><scope attributes="__ctor__" doc="Constructor&#xA;&#xA;@access	public" ilk="function" line="78" lineend="79" name="Structures_Graph_Node" signature="Structures_Graph_Node()" /><scope doc="Node graph getter&#xA;&#xA;@return	Structures_Graph	Graph where node is stored&#xA;@access	public" ilk="function" line="90" lineend="92" name="getGraph" returns="Structures_Graph" signature="Structures_Graph &amp;getGraph()" /><scope doc="Node graph setter. This method should not be called directly. Use Graph::addNode instead.&#xA;&#xA;@param    Structures_Graph   Set the graph for this node. &#xA;@see      Structures_Graph::addNode()&#xA;@access	public" ilk="function" line="104" lineend="106" name="setGraph" signature="setGraph(&amp; $graph)"><variable ilk="argument" line="104" name="graph" /></scope><scope doc="Node data getter.&#xA;&#xA;Each graph node can contain a reference to one variable. This is the getter for that reference.&#xA;&#xA;@return	mixed	Data stored in node&#xA;@access	public" ilk="function" line="119" lineend="121" name="getData" returns="mixed" signature="mixed &amp;getData()" /><scope doc="Node data setter&#xA;&#xA;Each graph node can contain a reference to one variable. This is the setter for that reference.&#xA;&#xA;@return	mixed	Data to store in node&#xA;@access	public" ilk="function" line="134" lineend="136" name="setData" returns="mixed" signature="mixed setData($data)"><variable ilk="argument" line="134" name="data" /></scope><scope doc="Test for existence of metadata under a given key.&#xA;&#xA;Each graph node can contain multiple &apos;metadata&apos; entries, each stored under a different key, as in an &#xA;associative array or in a dictionary. This method tests whether a given metadata key exists for this node.&#xA;&#xA;@param    string    Key to test&#xA;@return	boolean	 &#xA;@access	public" ilk="function" line="151" lineend="153" name="metadataKeyExists" returns="boolean" signature="boolean metadataKeyExists($key)"><variable ilk="argument" line="151" name="key" /></scope><scope doc="Node metadata getter&#xA;&#xA;Each graph node can contain multiple &apos;metadata&apos; entries, each stored under a different key, as in an &#xA;associative array or in a dictionary. This method gets the data under the given key. If the key does&#xA;not exist, an error will be thrown, so testing using metadataKeyExists might be needed.&#xA;&#xA;@param    string  Key&#xA;@param    boolean nullIfNonexistent (defaults to false).&#xA;@return	mixed	Metadata Data stored in node under given key&#xA;@see      metadataKeyExists&#xA;@access	public" ilk="function" line="171" lineend="183" name="getMetadata" returns="mixed" signature="mixed &amp;getMetadata($key, $nullIfNonexistent = false)"><variable ilk="argument" line="171" name="key" /><variable default="false" ilk="argument" line="171" name="nullIfNonexistent" /><variable citdl="Pear.raiseError()" line="176" name="a" /></scope><scope doc="Delete metadata by key&#xA;&#xA;Each graph node can contain multiple &apos;metadata&apos; entries, each stored under a different key, as in an &#xA;associative array or in a dictionary. This method removes any data that might be stored under the provided key.&#xA;If the key does not exist, no error is thrown, so it is safe using this method without testing for key existence.&#xA;&#xA;@param    string  Key&#xA;@access	public" ilk="function" line="198" lineend="200" name="unsetMetadata" signature="unsetMetadata($key)"><variable ilk="argument" line="198" name="key" /></scope><scope doc="Node metadata setter&#xA;&#xA;Each graph node can contain multiple &apos;metadata&apos; entries, each stored under a different key, as in an &#xA;associative array or in a dictionary. This method stores data under the given key. If the key already exists,&#xA;previously stored data is discarded.&#xA;&#xA;@param    string  Key&#xA;@param    mixed   Data &#xA;@access	public" ilk="function" line="216" lineend="218" name="setMetadata" signature="setMetadata($key, $data)"><variable ilk="argument" line="216" name="key" /><variable ilk="argument" line="216" name="data" /></scope><scope doc="@access private" ilk="function" line="223" lineend="225" name="_connectTo" signature="_connectTo(&amp; $destinationNode)"><variable ilk="argument" line="223" name="destinationNode" /></scope><scope doc="Connect this node to another one.&#xA;&#xA;If the graph is not directed, the reverse arc, connecting $destinationNode to $this is also created.&#xA;&#xA;@param    Structures_Graph_Node Node to connect to&#xA;@access	public" ilk="function" line="238" lineend="250" name="connectTo" signature="connectTo(&amp; $destinationNode)"><variable ilk="argument" line="238" name="destinationNode" /></scope><scope doc="Return nodes connected to this one.&#xA;&#xA;@return   array   Array of nodes&#xA;@access	public" ilk="function" line="261" lineend="263" name="getNeighbours" returns="array" signature="array getNeighbours()" /><scope doc="Test wether this node has an arc to the target node&#xA;&#xA;@return	boolean   True if the two nodes are connected&#xA;@access	public" ilk="function" line="274" lineend="298" name="connectsTo" returns="boolean" signature="boolean connectsTo(&amp; $target)"><variable ilk="argument" line="274" name="target" /><variable citdl="array_keys()" line="280" name="arcKeys" /><variable citdl="target" line="279" name="copy" /><variable citdl="this._arcs" line="286" name="arc" /><variable attributes="__not_yet_defined__" line="281" name="key" /></scope><scope doc="Calculate the in degree of the node.&#xA;&#xA;The indegree for a node is the number of arcs entering the node. For non directed graphs, &#xA;the indegree is equal to the outdegree.&#xA;&#xA;@return	integer	 In degree of the node&#xA;@access	public" ilk="function" line="312" lineend="322" name="inDegree" returns="integer" signature="integer inDegree()"><variable citdl="this._graph.getNodes()" line="316" name="graphNodes" /><variable citdl="int" line="315" name="result" /><variable attributes="__not_yet_defined__" line="317" name="key" /></scope><scope doc="Calculate the out degree of the node.&#xA;&#xA;The outdegree for a node is the number of arcs exiting the node. For non directed graphs,&#xA;the outdegree is always equal to the indegree.&#xA;&#xA;@return	integer	 Out degree of the node&#xA;@access	public" ilk="function" line="336" lineend="339" name="outDegree" returns="integer" signature="integer outDegree()" /></scope></scope>