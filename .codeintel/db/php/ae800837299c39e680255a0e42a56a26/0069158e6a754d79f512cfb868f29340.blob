<scope ilk="blob" lang="PHP" name="Frontend.php" src="/usr/share/php/PEAR/Frontend.php"><scope classrefs="PEAR" doc="Singleton-based frontend for PEAR user input/output&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="46" lineend="228" name="PEAR_Frontend"><scope doc="Retrieve the frontend object&#xA;@return PEAR_Frontend_CLI|PEAR_Frontend_Web|PEAR_Frontend_Gtk&#xA;@static" ilk="function" line="53" lineend="65" name="singleton" returns="PEAR_Frontend_CLI" signature="PEAR_Frontend_CLI &amp;singleton($type = null)"><variable default="null" ilk="argument" line="53" name="type" /><variable citdl="boolean" line="57" name="a" /><variable attributes="__not_yet_defined__" line="56" name="GLOBALS" /></scope><scope doc="Set the frontend class that will be used by calls to {@link singleton()}&#xA;&#xA;Frontends are expected to conform to the PEAR naming standard of&#xA;_ =&gt; DIRECTORY_SEPARATOR (PEAR_Frontend_CLI is in PEAR/Frontend/CLI.php)&#xA;@param string $uiclass full class name&#xA;@return PEAR_Frontend&#xA;@static" ilk="function" line="76" lineend="106" name="setFrontendClass" returns="PEAR_Frontend" signature="PEAR_Frontend &amp;setFrontendClass(string $uiclass)"><variable citdl="string" ilk="argument" line="76" name="uiclass" /><variable attributes="__not_yet_defined__" line="78" name="GLOBALS" /><variable line="91" name="obj" /><variable citdl="PEAR.raiseError()" line="100" name="err" /><variable citdl="str_replace()" line="84" name="file" /></scope><scope doc="Set the frontend class that will be used by calls to {@link singleton()}&#xA;&#xA;Frontends are expected to be a descendant of PEAR_Frontend&#xA;@param PEAR_Frontend&#xA;@return PEAR_Frontend&#xA;@static" ilk="function" line="116" lineend="132" name="setFrontendObject" returns="PEAR_Frontend" signature="PEAR_Frontend &amp;setFrontendObject($uiobject)"><variable ilk="argument" line="116" name="uiobject" /><variable attributes="__not_yet_defined__" line="118" name="GLOBALS" /><variable citdl="PEAR.raiseError()" line="125" name="err" /></scope><scope doc="@param string $path relative or absolute include path&#xA;@return boolean&#xA;@static" ilk="function" line="139" lineend="152" name="isIncludeable" returns="boolean" signature="boolean isIncludeable(string $path)"><variable citdl="string" ilk="argument" line="139" name="path" /><variable line="145" name="fp" /></scope><scope doc="@param PEAR_Config" ilk="function" line="157" lineend="159" name="setConfig" signature="setConfig(&amp; $config)"><variable ilk="argument" line="157" name="config" /></scope><scope doc="This can be overridden to allow session-based temporary file management&#xA;&#xA;By default, all files are deleted at the end of a session.  The web installer&#xA;needs to be able to sustain a list over many sessions in order to support&#xA;user interaction with install scripts" ilk="function" line="168" lineend="171" name="addTempFile" signature="addTempFile($file)"><variable ilk="argument" line="168" name="file" /></scope><scope doc="Log an action&#xA;&#xA;@param string $msg the message to log&#xA;@param boolean $append_crlf&#xA;@return boolean true&#xA;@abstract" ilk="function" line="181" lineend="183" name="log" returns="boolean" signature="boolean log(string $msg, boolean $append_crlf = true)"><variable citdl="string" ilk="argument" line="181" name="msg" /><variable citdl="boolean" default="true" ilk="argument" line="181" name="append_crlf" /></scope><scope doc="Run a post-installation script&#xA;&#xA;@param array $scripts array of post-install scripts&#xA;@abstract" ilk="function" line="191" lineend="193" name="runPostinstallScripts" signature="runPostinstallScripts(array &amp; $scripts)"><variable citdl="array" ilk="argument" line="191" name="scripts" /></scope><scope doc="Display human-friendly output formatted depending on the&#xA;$command parameter.&#xA;&#xA;This should be able to handle basic output data with no command&#xA;@param mixed  $data    data structure containing the information to display&#xA;@param string $command command from which this method was called&#xA;@abstract" ilk="function" line="204" lineend="206" name="outputData" signature="outputData(mixed $data, string $command = &apos;_default&apos;)"><variable citdl="mixed" ilk="argument" line="204" name="data" /><variable citdl="string" default="&apos;_default&apos;" ilk="argument" line="204" name="command" /></scope><scope doc="Display a modal form dialog and return the given input&#xA;&#xA;A frontend that requires multiple requests to retrieve and process&#xA;data must take these needs into account, and implement the request&#xA;handling code.&#xA;@param string $command  command from which this method was called&#xA;@param array  $prompts  associative array. keys are the input field names&#xA;                        and values are the description&#xA;@param array  $types    array of input field types (text, password,&#xA;                        etc.) keys have to be the same like in $prompts&#xA;@param array  $defaults array of default values. again keys have&#xA;                        to be the same like in $prompts.  Do not depend&#xA;                        on a default value being set.&#xA;@return array input sent by the user&#xA;@abstract" ilk="function" line="225" lineend="227" name="userDialog" returns="array" signature="array userDialog(string $command, array $prompts, array $types = array(), array $defaults = array())"><variable citdl="string" ilk="argument" line="225" name="command" /><variable citdl="array" ilk="argument" line="225" name="prompts" /><variable citdl="array" default="array()" ilk="argument" line="225" name="types" /><variable citdl="array" default="array()" ilk="argument" line="225" name="defaults" /></scope></scope></scope>