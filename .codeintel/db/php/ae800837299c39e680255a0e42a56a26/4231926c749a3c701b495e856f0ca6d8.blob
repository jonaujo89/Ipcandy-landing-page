<scope ilk="blob" lang="PHP" name="PackageFile.php" src="/usr/share/php/PEAR/PackageFile.php"><import line="20" module="PEAR/Validate.php" /><import line="103" module="PEAR/PackageFile/Parser/v" /><import line="131" module="PEAR/PackageFile/v" /><import line="241" module="PEAR/ErrorStack.php" /><import line="305" module="Archive/Tar.php" /><variable citdl="int" ilk="constant" line="24" name="PEAR_PACKAGEFILE_ERROR_NO_PACKAGEVERSION" /><variable citdl="int" ilk="constant" line="29" name="PEAR_PACKAGEFILE_ERROR_INVALID_PACKAGEVERSION" /><scope doc="Abstraction for the package.xml package description file&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="42" lineend="492" name="PEAR_PackageFile"><variable citdl="PEAR_Config" doc="@var PEAR_Config" line="47" name="_config" /><variable citdl="debug" line="48" name="_debug" /><variable citdl="boolean" line="50" name="_logger" /><variable citdl="boolean" doc="@var boolean" line="54" name="_rawReturn" /><variable citdl="array" doc="helper for extracting Archive_Tar errors&#xA;@var array&#xA;@access private" line="61" name="_extractErrors" /><scope attributes="__ctor__" doc="@param   PEAR_Config $config&#xA;@param   ?   $debug&#xA;@param   string @tmpdir Optional temporary directory for uncompressing&#xA;         files" ilk="function" line="70" lineend="74" name="PEAR_PackageFile" signature="PEAR_PackageFile(PEAR_Config &amp; $config, $debug = false)"><variable citdl="PEAR_Config" ilk="argument" line="70" name="config" /><variable default="false" ilk="argument" line="70" name="debug" /></scope><scope doc="Turn off validation - return a parsed package.xml without checking it&#xA;&#xA;This is used by the package-validate command" ilk="function" line="81" lineend="84" name="rawReturn" signature="rawReturn()" /><scope ilk="function" line="86" lineend="89" name="setLogger" signature="setLogger(&amp; $l)"><variable ilk="argument" line="86" name="l" /></scope><scope doc="Create a PEAR_PackageFile_Parser_v* of a given version.&#xA;@param   int $version&#xA;@return  PEAR_PackageFile_Parser_v1|PEAR_PackageFile_Parser_v1" ilk="function" line="96" lineend="108" name="parserFactory" returns="PEAR_PackageFile_Parser_v1" signature="PEAR_PackageFile_Parser_v1 &amp;parserFactory(int $version)"><variable citdl="int" ilk="argument" line="96" name="version" /><variable citdl="boolean" line="99" name="a" /><variable citdl="string" line="105" name="class" /></scope><scope doc="For simpler unit-testing&#xA;@return string" ilk="function" line="114" lineend="117" name="getClassPrefix" returns="string" signature="string getClassPrefix()" /><scope doc="Create a PEAR_PackageFile_v* of a given version.&#xA;@param   int $version&#xA;@return  PEAR_PackageFile_v1|PEAR_PackageFile_v1" ilk="function" line="124" lineend="136" name="factory" returns="PEAR_PackageFile_v1" signature="PEAR_PackageFile_v1 &amp;factory(int $version)"><variable citdl="int" ilk="argument" line="124" name="version" /><variable citdl="boolean" line="127" name="a" /><variable citdl="this.getClassPrefix()" line="133" name="class" /></scope><scope doc="Create a PEAR_PackageFile_v* from its toArray() method&#xA;&#xA;WARNING: no validation is performed, the array is assumed to be valid,&#xA;always parse from xml if you want validation.&#xA;@param   array $arr&#xA;@return PEAR_PackageFileManager_v1|PEAR_PackageFileManager_v2&#xA;@uses    factory() to construct the returned object." ilk="function" line="147" lineend="173" name="fromArray" returns="PEAR_PackageFileManager_v1" signature="PEAR_PackageFileManager_v1 &amp;fromArray(array $arr)"><variable citdl="array" ilk="argument" line="147" name="arr" /><variable citdl="this.factory()" line="150" name="obj" /></scope><scope doc="Create a PEAR_PackageFile_v* from an XML string.&#xA;@access  public&#xA;@param   string $data contents of package.xml file&#xA;@param   int $state package state (one of PEAR_VALIDATE_* constants)&#xA;@param   string $file full path to the package.xml file (and the files&#xA;         it references)&#xA;@param   string $archive optional name of the archive that the XML was&#xA;         extracted from, if any&#xA;@return  PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@uses    parserFactory() to construct a parser to load the package." ilk="function" line="187" lineend="277" name="fromXmlString" returns="PEAR_PackageFile_v1" signature="PEAR_PackageFile_v1 &amp;fromXmlString(string $data, int $state, string $file, string $archive = false)"><variable citdl="string" ilk="argument" line="187" name="data" /><variable citdl="int" ilk="argument" line="187" name="state" /><variable citdl="string" ilk="argument" line="187" name="file" /><variable citdl="string" default="false" ilk="argument" line="187" name="archive" /><variable citdl="PEAR.raiseError()" line="220" name="a" /><variable attributes="__not_yet_defined__" line="214" name="warning" /><variable attributes="__not_yet_defined__" line="189" name="packageversion" /><variable citdl="this.parserFactory()" line="195" name="object" /><variable citdl="object.parse()" line="201" name="pf" /></scope><scope doc="Register a temporary file or directory.  When the destructor is&#xA;executed, all registered temporary files and directories are&#xA;removed.&#xA;&#xA;@param string  $file  name of file or directory&#xA;@return  void" ilk="function" line="287" lineend="290" name="addTempFile" signature="void addTempFile(string $file)"><variable citdl="string" ilk="argument" line="287" name="file" /></scope><scope doc="Create a PEAR_PackageFile_v* from a compresed Tar or Tgz file.&#xA;@access  public&#xA;@param string contents of package.xml file&#xA;@param int package state (one of PEAR_VALIDATE_* constants)&#xA;@return  PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@using   Archive_Tar to extract the files&#xA;@using   fromPackageFile() to load the package after the package.xml&#xA;         file is extracted." ilk="function" line="302" lineend="380" name="fromTgzFile" returns="PEAR_PackageFile_v1" signature="PEAR_PackageFile_v1 &amp;fromTgzFile($file, $state)"><variable ilk="argument" line="302" name="file" /><variable ilk="argument" line="302" name="state" /><variable citdl="name" line="336" name="xml" /><variable citdl="file" line="339" name="name" /><variable citdl="Archive_Tar" line="308" name="tar" /><variable citdl="implode()" line="366" name="extra" /><variable citdl="PEAR.raiseError()" line="321" name="ret" /><variable citdl="tar.listContent()" line="313" name="content" /><variable citdl="file" line="337" name="origfile" /><variable citdl="System.mktemp()" line="354" name="tmpdir" /><variable attributes="__not_yet_defined__" line="348" name="match" /></scope><scope doc="helper callback for extracting Archive_Tar errors&#xA;&#xA;@param PEAR_Error|null $err&#xA;@return array&#xA;@access private" ilk="function" line="389" lineend="398" name="_extractErrors" returns="array" signature="array _extractErrors($err = null)"><variable default="null" ilk="argument" line="389" name="err" /><variable citdl="array()" line="394" name="errors" /><variable citdl="errors" line="393" name="e" /></scope><variable attributes="static" citdl="array()" line="391" name="errors" /><scope doc="Create a PEAR_PackageFile_v* from a package.xml file.&#xA;&#xA;@access public&#xA;@param   string  $descfile  name of package xml file&#xA;@param   int     $state package state (one of PEAR_VALIDATE_* constants)&#xA;@param   string|false $archive name of the archive this package.xml came&#xA;         from, if any&#xA;@return  PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@uses    PEAR_PackageFile::fromXmlString to create the oject after the&#xA;         XML is loaded from the package.xml file." ilk="function" line="412" lineend="431" name="fromPackageFile" returns="PEAR_PackageFile_v1" signature="PEAR_PackageFile_v1 &amp;fromPackageFile(string $descfile, int $state, $archive = false)"><variable citdl="string" ilk="argument" line="412" name="descfile" /><variable citdl="int" ilk="argument" line="412" name="state" /><variable default="false" ilk="argument" line="412" name="archive" /><variable citdl="boolean" line="414" name="fp" /><variable citdl="PEAR.raiseError()" line="421" name="a" /><variable citdl="file_get_contents()" line="428" name="data" /><variable citdl="PEAR_PackageFile.fromXmlString()" line="429" name="ret" /></scope><scope doc="Create a PEAR_PackageFile_v* from a .tgz archive or package.xml file.&#xA;&#xA;This method is able to extract information about a package from a .tgz&#xA;archive or from a XML package definition file.&#xA;&#xA;@access public&#xA;@param   string  $info file name&#xA;@param   int     $state package state (one of PEAR_VALIDATE_* constants)&#xA;@return  PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@uses    fromPackageFile() if the file appears to be XML&#xA;@uses    fromTgzFile() to load all non-XML files" ilk="function" line="446" lineend="491" name="fromAnyFile" returns="PEAR_PackageFile_v1" signature="PEAR_PackageFile_v1 &amp;fromAnyFile(string $info, int $state)"><variable citdl="string" ilk="argument" line="446" name="info" /><variable citdl="int" ilk="argument" line="446" name="state" /><variable citdl="boolean" line="461" name="fp" /><variable citdl="realpath()" line="449" name="dir_name" /><variable citdl="substr()" line="470" name="tmp" /><variable citdl="fread()" line="477" name="test" /></scope></scope></scope>