<scope ilk="blob" lang="PHP" name="Common.php" src="/usr/share/php/PEAR/Common.php"><import line="23" module="PEAR.php" /><import line="188" module="System.php" /><import line="212" module="PEAR/Frontend.php" /><import line="232" module="System.php" /><import line="252" module="PEAR/Frontend.php" /><import line="280" module="System.php" /><import line="737" module="PEAR/PackageFile/v2/Validator.php" /><import line="830" module="PEAR/Downloader.php" /><import line="836" module="PEAR/Config.php" /><import line="837" module="PEAR/PackageFile.php" /><variable citdl="int" ilk="constant" line="28" name="PEAR_COMMON_ERROR_INVALIDPHP" /><variable citdl="string" ilk="constant" line="29" name="_PEAR_COMMON_PACKAGE_NAME_PREG" /><variable citdl="string" ilk="constant" line="30" name="PEAR_COMMON_PACKAGE_NAME_PREG" /><variable citdl="string" ilk="constant" line="33" name="_PEAR_COMMON_PACKAGE_VERSION_PREG" /><variable citdl="string" ilk="constant" line="34" name="PEAR_COMMON_PACKAGE_VERSION_PREG" /><variable citdl="string" ilk="constant" line="37" name="_PEAR_COMMON_PACKAGE_DOWNLOAD_PREG" /><variable citdl="string" ilk="constant" line="39" name="PEAR_COMMON_PACKAGE_DOWNLOAD_PREG" /><variable citdl="string" ilk="constant" line="42" name="_PEAR_CHANNELS_NAME_PREG" /><variable citdl="string" ilk="constant" line="43" name="PEAR_CHANNELS_NAME_PREG" /><variable citdl="string" ilk="constant" line="46" name="_PEAR_CHANNELS_SERVER_PREG" /><variable citdl="string" ilk="constant" line="47" name="PEAR_CHANNELS_SERVER_PREG" /><variable citdl="string" ilk="constant" line="49" name="_PEAR_CHANNELS_PACKAGE_PREG" /><variable citdl="string" ilk="constant" line="51" name="PEAR_CHANNELS_PACKAGE_PREG" /><variable citdl="string" ilk="constant" line="53" name="_PEAR_COMMON_CHANNEL_DOWNLOAD_PREG" /><variable citdl="string" ilk="constant" line="55" name="PEAR_COMMON_CHANNEL_DOWNLOAD_PREG" /><scope classrefs="PEAR" doc="Class providing common functionality for PEAR administration classes.&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V. V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1&#xA;@deprecated This class will disappear, and its components will be spread&#xA;            into smaller classes, like the AT&amp;T breakup, as of Release 1.4.0a1" ilk="class" line="127" lineend="834" name="PEAR_Common"><variable citdl="ui" doc="User Interface object (PEAR_Frontend_* class).  If null,&#xA;the log() method uses print.&#xA;@var object" line="134" name="ui" /><variable citdl="PEAR_Config" doc="Configuration object (PEAR_Config).&#xA;@var PEAR_Config" line="140" name="config" /><variable citdl="array()" line="143" name="element_stack" /><variable line="146" name="current_element" /><variable citdl="array()" line="149" name="current_attributes" /><variable citdl="array()" line="152" name="pkginfo" /><variable line="154" name="current_path" /><variable citdl="boolean" doc="Flag variable used to mark a valid package file&#xA;@var boolean&#xA;@access private" line="161" name="_validPackageFile" /><scope attributes="__ctor__" doc="PEAR_Common constructor&#xA;&#xA;@access public" ilk="function" line="168" lineend="173" name="PEAR_Common" signature="PEAR_Common()" /><variable citdl="this.config.get()" line="172" name="debug" /><scope doc="PEAR_Common destructor&#xA;&#xA;@access private" ilk="function" line="180" lineend="196" name="_PEAR_Common" signature="_PEAR_Common()"><variable citdl="GLOBALS" line="184" name="tempfiles" /><variable line="185" name="file" /></scope><scope doc="Register a temporary file or directory.  When the destructor is&#xA;executed, all registered temporary files and directories are&#xA;removed.&#xA;&#xA;@param string  $file  name of file or directory&#xA;&#xA;@return void&#xA;&#xA;@access public" ilk="function" line="209" lineend="215" name="addTempFile" signature="void addTempFile(string $file)"><variable citdl="string" ilk="argument" line="209" name="file" /></scope><scope doc="Wrapper to System::mkDir(), creates a directory as well as&#xA;any necessary parent directories.&#xA;&#xA;@param string  $dir  directory name&#xA;&#xA;@return bool TRUE on success, or a PEAR error&#xA;&#xA;@access public" ilk="function" line="227" lineend="235" name="mkDirHier" returns="bool" signature="bool mkDirHier(string $dir)"><variable citdl="string" ilk="argument" line="227" name="dir" /></scope><scope doc="Logging method.&#xA;&#xA;@param int    $level  log level (0 is quiet, higher is noisier)&#xA;@param string $msg    message to write to the log&#xA;&#xA;@return void&#xA;&#xA;@access public&#xA;@static" ilk="function" line="248" lineend="262" name="log" signature="void log(int $level, string $msg, $append_crlf = true)"><variable citdl="int" ilk="argument" line="248" name="level" /><variable citdl="string" ilk="argument" line="248" name="msg" /><variable default="true" ilk="argument" line="248" name="append_crlf" /><variable citdl="PEAR_Frontend.singleton()" line="255" name="ui" /></scope><scope doc="Create and register a temporary directory.&#xA;&#xA;@param string $tmpdir (optional) Directory to use as tmpdir.&#xA;                      Will use system defaults (for example&#xA;                      /tmp or c:\windows\temp) if not specified&#xA;&#xA;@return string name of created directory&#xA;&#xA;@access public" ilk="function" line="275" lineend="289" name="mkTempDir" returns="string" signature="string mkTempDir(string $tmpdir = &apos;&apos;)"><variable citdl="string" default="&apos;&apos;" ilk="argument" line="275" name="tmpdir" /><variable citdl="tmpdir" line="277" name="topt" /></scope><scope doc="Set object that represents the frontend to be used.&#xA;&#xA;@param  object Reference of the frontend object&#xA;@return void&#xA;@access public" ilk="function" line="298" lineend="301" name="setFrontendObject" signature="void setFrontendObject(&amp; $ui)"><variable ilk="argument" line="298" name="ui" /></scope><scope doc="Return an array containing all of the states that are more stable than&#xA;or equal to the passed in state&#xA;&#xA;@param string Release state&#xA;@param boolean Determines whether to include $state in the list&#xA;@return false|array False if $state is not a valid release state" ilk="function" line="311" lineend="322" name="betterStates" returns="false" signature="false betterStates($state, $include = false)"><variable ilk="argument" line="311" name="state" /><variable default="false" ilk="argument" line="311" name="include" /><variable citdl="array_search()" line="314" name="i" /></scope><variable attributes="static" citdl="array()" line="313" name="states" /><scope doc="Get the valid roles for a PEAR package maintainer&#xA;&#xA;@return array&#xA;@static" ilk="function" line="330" lineend="333" name="getUserRoles" returns="array" signature="array getUserRoles()" /><scope doc="Get the valid package release states of packages&#xA;&#xA;@return array&#xA;@static" ilk="function" line="341" lineend="344" name="getReleaseStates" returns="array" signature="array getReleaseStates()" /><scope doc="Get the implemented dependency types (php, ext, pkg etc.)&#xA;&#xA;@return array&#xA;@static" ilk="function" line="352" lineend="355" name="getDependencyTypes" returns="array" signature="array getDependencyTypes()" /><scope doc="Get the implemented dependency relations (has, lt, ge etc.)&#xA;&#xA;@return array&#xA;@static" ilk="function" line="363" lineend="366" name="getDependencyRelations" returns="array" signature="array getDependencyRelations()" /><scope doc="Get the implemented file roles&#xA;&#xA;@return array&#xA;@static" ilk="function" line="374" lineend="377" name="getFileRoles" returns="array" signature="array getFileRoles()" /><scope doc="Get the implemented file replacement types in&#xA;&#xA;@return array&#xA;@static" ilk="function" line="385" lineend="388" name="getReplacementTypes" returns="array" signature="array getReplacementTypes()" /><scope doc="Get the implemented file replacement types in&#xA;&#xA;@return array&#xA;@static" ilk="function" line="396" lineend="399" name="getProvideTypes" returns="array" signature="array getProvideTypes()" /><scope doc="Get the implemented file replacement types in&#xA;&#xA;@return array&#xA;@static" ilk="function" line="407" lineend="410" name="getScriptPhases" returns="array" signature="array getScriptPhases()" /><scope doc="Test whether a string contains a valid package name.&#xA;&#xA;@param string $name the package name to test&#xA;&#xA;@return bool&#xA;&#xA;@access public" ilk="function" line="421" lineend="424" name="validPackageName" returns="bool" signature="bool validPackageName(string $name)"><variable citdl="string" ilk="argument" line="421" name="name" /></scope><scope doc="Test whether a string contains a valid package version.&#xA;&#xA;@param string $ver the package version to test&#xA;&#xA;@return bool&#xA;&#xA;@access public" ilk="function" line="435" lineend="438" name="validPackageVersion" returns="bool" signature="bool validPackageVersion(string $ver)"><variable citdl="string" ilk="argument" line="435" name="ver" /></scope><scope doc="@param string $path relative or absolute include path&#xA;@return boolean&#xA;@static" ilk="function" line="445" lineend="460" name="isIncludeable" returns="boolean" signature="boolean isIncludeable(string $path)"><variable citdl="string" ilk="argument" line="445" name="path" /><variable citdl="realpath()" line="453" name="test" /><variable citdl="explode()" line="451" name="ipath" /><variable attributes="__not_yet_defined__" line="452" name="include" /></scope><scope ilk="function" line="462" lineend="476" name="_postProcessChecks" returns="this._postProcessValidPackagexml()" signature="_postProcessChecks($pf)"><variable ilk="argument" line="462" name="pf" /><variable citdl="pf.getUserinfo()" line="468" name="errs" /><variable citdl="this.raiseError()" line="471" name="e" /><variable attributes="__not_yet_defined__" line="470" name="error" /></scope><scope doc="Returns information about a package file.  Expects the name of&#xA;a gzipped tar file as input.&#xA;&#xA;@param string  $file  name of .tgz file&#xA;&#xA;@return array  array with package information&#xA;&#xA;@access public&#xA;@deprecated use PEAR_PackageFile-&gt;fromTgzFile() instead" ilk="function" line="490" lineend="495" name="infoFromTgzFile" returns="array" signature="array infoFromTgzFile(string $file)"><variable citdl="string" ilk="argument" line="490" name="file" /><variable citdl="PEAR_PackageFile" line="492" name="packagefile" /><variable citdl="packagefile.fromTgzFile()" line="493" name="pf" /></scope><scope doc="Returns information about a package file.  Expects the name of&#xA;a package xml file as input.&#xA;&#xA;@param string  $descfile  name of package xml file&#xA;&#xA;@return array  array with package information&#xA;&#xA;@access public&#xA;@deprecated use PEAR_PackageFile-&gt;fromPackageFile() instead" ilk="function" line="509" lineend="514" name="infoFromDescriptionFile" returns="array" signature="array infoFromDescriptionFile(string $descfile)"><variable citdl="string" ilk="argument" line="509" name="descfile" /><variable citdl="PEAR_PackageFile" line="511" name="packagefile" /><variable citdl="packagefile.fromPackageFile()" line="512" name="pf" /></scope><scope doc="Returns information about a package file.  Expects the contents&#xA;of a package xml file as input.&#xA;&#xA;@param string  $data  contents of package.xml file&#xA;&#xA;@return array   array with package information&#xA;&#xA;@access public&#xA;@deprecated use PEAR_PackageFile-&gt;fromXmlstring() instead" ilk="function" line="528" lineend="533" name="infoFromString" returns="array" signature="array infoFromString(string $data)"><variable citdl="string" ilk="argument" line="528" name="data" /><variable citdl="PEAR_PackageFile" line="530" name="packagefile" /><variable citdl="packagefile.fromXmlString()" line="531" name="pf" /></scope><scope doc="@param PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@return array" ilk="function" line="539" lineend="558" name="_postProcessValidPackagexml" returns="array" signature="array _postProcessValidPackagexml(&amp; $pf)"><variable ilk="argument" line="539" name="pf" /><variable citdl="pf.toArray()" line="548" name="arr" /></scope><scope doc="Returns package information from different sources&#xA;&#xA;This method is able to extract information about a package&#xA;from a .tgz archive or from a XML package definition file.&#xA;&#xA;@access public&#xA;@param  string Filename of the source (&apos;package.xml&apos;, &apos;&lt;package&gt;.tgz&apos;)&#xA;@return string&#xA;@deprecated use PEAR_PackageFile-&gt;fromAnyFile() instead" ilk="function" line="571" lineend="591" name="infoFromAny" returns="string" signature="string infoFromAny($info)"><variable ilk="argument" line="571" name="info" /><variable citdl="pf.getUserinfo()" line="577" name="errs" /><variable citdl="PEAR_PackageFile" line="574" name="packagefile" /><variable citdl="packagefile.fromAnyFile()" line="575" name="pf" /><variable citdl="this.raiseError()" line="580" name="e" /><variable attributes="__not_yet_defined__" line="579" name="error" /></scope><scope doc="Return an XML document based on the package info (as returned&#xA;by the PEAR_Common::infoFrom* methods).&#xA;&#xA;@param array  $pkginfo  package info&#xA;&#xA;@return string XML data&#xA;&#xA;@access public&#xA;@deprecated use a PEAR_PackageFile_v* object&apos;s generator instead" ilk="function" line="604" lineend="611" name="xmlFromInfo" returns="string" signature="string xmlFromInfo(array $pkginfo)"><variable citdl="array" ilk="argument" line="604" name="pkginfo" /><variable citdl="PEAR_PackageFile" line="607" name="packagefile" /><variable citdl="PEAR_Config.singleton()" line="606" name="config" /><variable citdl="pf.getDefaultGenerator()" line="609" name="gen" /><variable citdl="packagefile.fromArray()" line="608" name="pf" /></scope><scope doc="Validate XML package definition file.&#xA;&#xA;@param  string $info Filename of the package archive or of the&#xA;               package definition file&#xA;@param  array $errors Array that will contain the errors&#xA;@param  array $warnings Array that will contain the warnings&#xA;@param  string $dir_prefix (optional) directory where source files&#xA;               may be found, or empty if they are not available&#xA;@access public&#xA;@return boolean&#xA;@deprecated use the validation of PEAR_PackageFile objects" ilk="function" line="626" lineend="654" name="validatePackageInfo" returns="boolean" signature="boolean validatePackageInfo(string $info, array &amp; $errors, array &amp; $warnings, string $dir_prefix = &apos;&apos;)"><variable citdl="string" ilk="argument" line="626" name="info" /><variable citdl="array" ilk="argument" line="626" name="errors" /><variable citdl="array" ilk="argument" line="626" name="warnings" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="626" name="dir_prefix" /><variable citdl="pf.getUserinfo()" line="639" name="errs" /><variable citdl="PEAR_PackageFile" line="629" name="packagefile" /><variable attributes="__not_yet_defined__" line="641" name="error" /><variable citdl="PEAR_Config.singleton()" line="628" name="config" /><variable citdl="packagefile.fromXmlString()" line="632" name="pf" /></scope><scope doc="Build a &quot;provides&quot; array from data returned by&#xA;analyzeSourceCode().  The format of the built array is like&#xA;this:&#xA;&#xA; array(&#xA;   &apos;class;MyClass&apos; =&gt; &apos;array(&apos;type&apos; =&gt; &apos;class&apos;, &apos;name&apos; =&gt; &apos;MyClass&apos;),&#xA;   ...&#xA; )&#xA;&#xA;&#xA;@param array $srcinfo array with information about a source file&#xA;as returned by the analyzeSourceCode() method.&#xA;&#xA;@return void&#xA;&#xA;@access public" ilk="function" line="675" lineend="725" name="buildProvidesArray" signature="void buildProvidesArray(array $srcinfo)"><variable citdl="array" ilk="argument" line="675" name="srcinfo" /><variable citdl="string" line="700" name="function" /><variable citdl="basename()" line="677" name="file" /><variable attributes="__not_yet_defined__" line="698" name="methods" /><variable attributes="__not_yet_defined__" line="699" name="method" /><variable citdl="strlen()" line="683" name="pnl" /><variable citdl="string" line="685" name="key" /><variable citdl="string" line="678" name="pn" /><variable attributes="__not_yet_defined__" line="684" name="class" /></scope><scope doc="Analyze the source code of the given PHP file&#xA;&#xA;@param  string Filename of the PHP file&#xA;@return mixed&#xA;@access public" ilk="function" line="734" lineend="742" name="analyzeSourceCode" returns="mixed" signature="mixed analyzeSourceCode($file)"><variable ilk="argument" line="734" name="file" /><variable citdl="PEAR_PackageFile_v2_Validator" line="740" name="a" /></scope><scope ilk="function" line="744" lineend="780" name="detectDependencies" returns="boolean" signature="detectDependencies($any, $status_callback = null)"><variable ilk="argument" line="744" name="any" /><variable default="null" ilk="argument" line="744" name="status_callback" /><variable attributes="__not_yet_defined__" line="754" name="info" /><variable citdl="this.analyzeSourceCode()" line="761" name="tmp" /><variable citdl="array_diff()" line="771" name="undecl_c" /><variable citdl="array()" line="758" name="deps" /><variable attributes="__not_yet_defined__" line="760" name="fa" /><variable line="765" name="decl_m" /><variable line="760" name="file" /><variable line="766" name="inheri" /><variable line="764" name="decl_f" /><variable citdl="decl_c" line="759" name="used_c" /><variable citdl="array_unique()" line="763" name="decl_c" /></scope><scope doc="Download a file through HTTP.  Considers suggested file name in&#xA;Content-disposition: header and can run a callback function for&#xA;different events.  The callback will be called with two&#xA;parameters: the callback type, and parameters.  The implemented&#xA;callback types are:&#xA;&#xA; &apos;setup&apos;       called at the very beginning, parameter is a UI object&#xA;               that should be used for all output&#xA; &apos;message&apos;     the parameter is a string with an informational message&#xA; &apos;saveas&apos;      may be used to save with a different file name, the&#xA;               parameter is the filename that is about to be used.&#xA;               If a &apos;saveas&apos; callback returns a non-empty string,&#xA;               that file name will be used as the filename instead.&#xA;               Note that $save_dir will not be affected by this, only&#xA;               the basename of the file.&#xA; &apos;start&apos;       download is starting, parameter is number of bytes&#xA;               that are expected, or -1 if unknown&#xA; &apos;bytesread&apos;   parameter is the number of bytes read so far&#xA; &apos;done&apos;        download is complete, parameter is the total number&#xA;               of bytes read&#xA; &apos;connfailed&apos;  if the TCP connection fails, this callback is called&#xA;               with array(host,port,errno,errmsg)&#xA; &apos;writefailed&apos; if writing to disk fails, this callback is called&#xA;               with array(destfile,errmsg)&#xA;&#xA;If an HTTP proxy has been configured (http_proxy PEAR_Config&#xA;setting), the proxy will be used.&#xA;&#xA;@param string  $url       the URL to download&#xA;@param object  $ui        PEAR_Frontend_* instance&#xA;@param object  $config    PEAR_Config instance&#xA;@param string  $save_dir  (optional) directory to save file in&#xA;@param mixed   $callback  (optional) function/method to call for status&#xA;                          updates&#xA;&#xA;@return string  Returns the full path of the downloaded file or a PEAR&#xA;                error on failure.  If the error is caused by&#xA;                socket-related errors, the error object will&#xA;                have the fsockopen error code available through&#xA;                getCode().&#xA;&#xA;@access public&#xA;@deprecated in favor of PEAR_Downloader::downloadHttp()" ilk="function" line="827" lineend="833" name="downloadHttp" returns="string" signature="string downloadHttp(string $url, object &amp; $ui, string $save_dir = &apos;.&apos;, mixed $callback = null, object $config)"><variable citdl="string" ilk="argument" line="827" name="url" /><variable citdl="object" ilk="argument" line="827" name="ui" /><variable citdl="string" default="&apos;.&apos;" ilk="argument" line="827" name="save_dir" /><variable citdl="mixed" default="null" ilk="argument" line="827" name="callback" /><variable citdl="object" ilk="argument" line="827" name="config" /></scope></scope></scope>