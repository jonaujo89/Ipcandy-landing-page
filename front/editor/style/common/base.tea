.user_select<user-select>(value) {
    -webkit-user-select: @value;
    -moz-user-select: @value;
    -ms-user-select: @value;
    -o-user-select: @value;
    !user-select: @value;
}

.font_size_flexible(sizeInColumns, fontSize, minFontSize, paddingMobile, paddingDesktop) {
    @ if (typeof paddingMobile == 'undefined') paddingMobile = grid.columnPaddingMobile;
    @ if (!Array.isArray(paddingMobile)) paddingMobile = [paddingMobile, paddingMobile];

    @ var width = grid.getMobileWidth(sizeInColumns, paddingMobile, paddingDesktop);
    @ var contentWidth = width - paddingMobile[0] - paddingMobile[1];
    
    font-size: @{fontSize}px;
    margin-x: auto;
    @{
        for (var size = fontSize - 1; size >= minFontSize; size--) {
            @{
                @ var breakWidth = contentWidth * (size + 1) / fontSize + paddingMobile[0] + paddingMobile[1];
                @ var maxWidth = contentWidth * size / fontSize + paddingMobile[0] + paddingMobile[1];

                @media (max-width: @{breakWidth + grid.scrollBarWidth}px) {
                    font-size: @{size}px;
                    max-width: @{maxWidth}px
                }
            }
        }
    }
}

.margin_x<margin-x>(margin) {
    margin-left: @margin;
    margin-right: @margin;
}

.margin_y<margin-y>(margin) {
    margin-top: @margin;
    margin-bottom: @margin;
}

.padding_x<padding-x>(padding) {
    padding-left: @padding;
    padding-right: @padding;
}

.padding_y<padding-y>(padding) {
    padding-top: @padding;
    padding-bottom: @padding;
}