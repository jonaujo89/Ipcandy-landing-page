@{
    grid = {}
    grid.columnCount = 12
    grid.columnWidth = 97.5
    grid.columnPaddingDesktop = 15
    grid.columnPaddingMobile = 5
    grid.scrollBarWidth = 30;
}

.grid.container() {
    max-width: @{grid.getWidth(grid.columnCount)}px;
    width: 100%;
    padding-x: @{grid.columnPaddingDesktop}px;
    margin-x: auto;

    @media (max-width: @grid.mediaWidth()) {
        padding-x: @{grid.columnPaddingMobile}px;
    }
}

.grid.getWidth(columnCount) {
    @ columnCount = columnCount || grid.columnCount;
    @ return grid.columnWidth * columnCount;
}

.grid.getMobileWidth(columnColunt, paddingMobile, paddingDesktop) {
    @{
        if (typeof paddingDesktop == 'undefined') paddingDesktop = grid.columnPaddingDesktop;
        if (typeof paddingMobile == 'undefined') paddingMobile = grid.columnPaddingMobile;
        if (!Array.isArray(paddingDesktop)) paddingDesktop = [paddingDesktop, paddingDesktop];
        if (!Array.isArray(paddingMobile)) paddingMobile = [paddingMobile, paddingMobile];

        return grid.getWidth(columnColunt) - paddingDesktop[0] - paddingDesktop[1] + paddingMobile[0] + paddingMobile[1];
    }
}

.grid.mediaWidth(columnCount) {
    @ return (grid.getWidth(columnCount) + grid.scrollBarWidth)+'px';
}

.grid.row(mobileColumnCount) {
    display: flex;
    flex-wrap: wrap;
    margin-x: -@{grid.columnPaddingDesktop}px;
    
    @media (max-width: @grid.mediaWidth(mobileColumnCount)) {
        align-items: center;
        flex-direction: column;
        margin-x: -@{grid.columnPaddingMobile}px;
    }
}

.grid.columns(sizeInColumns) {
    position: relative;
    width: 100%;
    flex-grow: 1;
    flex-basis: 0;

    .grid.columnDesktop(sizeInColumns);
    .grid.columnMobile(sizeInColumns);
}

@{
    function getParentField(rule, fieldName, defaultValue) {
        while (rule) {
            if (rule[fieldName]) return rule[fieldName];
            rule = rule.parent;
        }
        return defaultValue;
    }
}

.grid.columnDesktop(sizeInColumns, paddingDesktop) {
    @ if (typeof paddingDesktop == 'undefined') paddingDesktop = grid.columnPaddingDesktop;
    @ if (!Array.isArray(paddingDesktop)) paddingDesktop = [paddingDesktop, paddingDesktop];

    max-width: @{grid.getWidth(sizeInColumns)}px;
    padding-left: @{paddingDesktop[0]}px;
    padding-right: @{paddingDesktop[1]}px;

    @ this.paddingDesktop = paddingDesktop;
}

.grid.columnMobile(sizeInColumns, paddingMobile, mediaWidth) {
    @ paddingDesktop = getParentField(this, 'paddingDesktop', grid.columnPaddingDesktop);

    @ if (typeof paddingMobile == 'undefined') paddingMobile = grid.columnPaddingMobile;
    @ if (!Array.isArray(paddingMobile)) paddingMobile = [paddingMobile, paddingMobile];
    @ if (typeof mediaWidth == 'undefined') mediaWidth = grid.mediaWidth();

    @media (max-width: @mediaWidth) {
        width: 100%;
        max-width: @{grid.getMobileWidth(sizeInColumns, paddingMobile, paddingDesktop)}px;
        padding-left: @{paddingMobile[0]}px;
        padding-right: @{paddingMobile[1]}px;
    }
}

.grid.prepend(columnOffset) {
    margin-left:  @{grid.getWidth(columnOffset)}px;
    
    @media (max-width: @grid.mediaWidth(grid.columnCount)) {
        margin-left: 0;
    }
}

.grid.append(columnOffset) {
    margin-right: @{grid.getWidth(columnOffset)}px;
    
    @media (max-width: @grid.mediaWidth(grid.columnCount)) {
        margin-right: 0;
    }
}