var _root_ = tea.dir;
teacss.parsed[_root_+"bake.tea"] = {func:(function(){with (teacss.functions){
/* @import "common/color-variate.js" */ tea.import(_root_+"common/color-variate.js");
/* @import "common/utils.js" */ tea.import(_root_+"common/utils.js");
/* @import "common/reset" */ tea.import(_root_+"common/reset.tea");
/* @import "common/base" */ tea.import(_root_+"common/base.tea");
/* @import "common/gradient" */ tea.import(_root_+"common/gradient.tea");
/* @import "common/css3" */ tea.import(_root_+"common/css3.tea");
/* @import "common/grid" */ tea.import(_root_+"common/grid.tea");
/* @import "common/background" */ tea.import(_root_+"common/background.tea");
/* @import "common/background_mask" */ tea.import(_root_+"common/background_mask.tea");
/* @import "common/effects" */ tea.import(_root_+"common/effects.tea");
/* @import "common/icons" */ tea.import(_root_+"common/icons.tea");

/* @import "content/typography" */ tea.import(_root_+"content/typography.tea");
/* @import "content/button" */ tea.import(_root_+"content/button.tea");
/* @import "content/form" */ tea.import(_root_+"content/form.tea");
/* @import "content/form_layout" */ tea.import(_root_+"content/form_layout.tea");
/* @import "content/testimonial" */ tea.import(_root_+"content/testimonial.tea");
/* @import "content/table" */ tea.import(_root_+"content/table.tea");
/* @import "content/alerts" */ tea.import(_root_+"content/alerts.tea");
/* @import "content/smart_image" */ tea.import(_root_+"content/smart_image.tea");
/* @import "content/countdown" */ tea.import(_root_+"content/countdown.tea");
/* @import "content/menu" */ tea.import(_root_+"content/menu.tea");
/* @import "content/validation" */ tea.import(_root_+"content/validation.tea");

/* @import "theme/layout" */ tea.import(_root_+"theme/layout.tea");
/* @import "theme/logo" */ tea.import(_root_+"theme/logo.tea");
/* @import "theme/list" */ tea.import(_root_+"theme/list.tea");
/* @import "theme/top_menu" */ tea.import(_root_+"theme/top_menu.tea");
/* @import "theme/smart_heading" */ tea.import(_root_+"theme/smart_heading.tea");

global.donut_root = tea.dir+"../";

align = function (x) {
    if (x && x!='auto' && x!='fill')
        tea.rule("text-align: "+(x),'');
    if (x=='fill')
        tea.rule("> *",function(){
            tea.rule("display: block !important",'');
            tea.rule("width: 100% !important",'');
            box_sizing.call(this, 'border-box');
        });
}

bake = function (data) {

    color1 = data.color1;
    color2 = data.color2;
    color3 = data.color3;

    reset.call(this);
    layout.call(this, data);
    
    typography.call(this, data.typography);
    alerts.call(this, data.alerts);
    
    eachComponent(function(cmp,id,parent,type){
        tea.rule("#"+(id)+"",function(){
            var sub = data.cmp ? (data.cmp[id] || {}) : {};
            
            if (sub.typography)
                typography.call(this, sub.typography,true);
                
            if (sub.shadow) {
                var sh = sub.shadow;
                box_shadow.call(this, sh.x+"px "+sh.y+"px "+sh.blur+"px "+color(sh.color));
            }
            
            if (sub.validation) {
                validation.call(this, sub.validation);
            } 

            if (type=="menu")
                menu.call(this, sub.menu || {});
            
            if (type=="logo")
                logo.call(this, sub.logo);
                
            if (type=="list")
                list.call(this, sub.list);
                
            if (type=="form") {
                var val = sub.form || {};
                form.call(this, val.style);
                form_layout.call(this, val.layout,val.style);
            }
            
            if (type=="testimonial") 
                testimonial.call(this, sub.testimonial);
                    
            if (type=="form_button") {
                var val = sub.button || {};
                if (val.style) {
                    tea.rule("button, a.button",function(){
                        button.call(this, val.style);
                    });
                }
                if (val.margin)
                    tea.rule("margin-top: "+(val.margin),'');
                align.call(this, val.align);    
            }
            
            if (type=="smart_text") {
                tea.rule("min-width: 100px",'');
                tea.rule("min-height: 60px",'');
                
                if (sub.smart_text) {
                    tea.rule("width: "+(sub.smart_text.width)+"px",'');
                    tea.rule("height: "+(sub.smart_text.height)+"px",'');
                }
                background.smart_text.call(this, sub.smart_text);
                
                if (sub.layout && sub.layout.height)
                    tea.rule("height: "+(sub.layout.height),'');
            }
            
            if (type=="smart_image") {
                smart_image.call(this, sub.smart_image);
            }
            
            if (type=="countdown") {
                countdown.call(this, sub.countdown);
            }            
        });
    });
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/bake.tea
};
teacss.parsed[_root_+"common/color-variate.js"] = {func:(function(){with (teacss.functions){
if (teacss.functions.variate) return;

var variations_cache = {};

teacss.functions.variate = function(color,n,brightness,saturation) {
    var variations = color_variations(color,brightness,saturation);
    return variations[n];
}
    
teacss.functions.color1 = 'red';
teacss.functions.color2 = 'green';
teacss.functions.color3 = 'blue';
teacss.functions.color4 = false;
teacss.functions.color5 = false;
teacss.functions.color6 = false;
teacss.functions.color7 = false;
teacss.functions.color8 = false;
teacss.functions.color9 = false;
    
teacss.functions.color = function(color,c2) {
    if (color && color.constructor==Array) {
        if (color.length<2) color = [1,1];
        color = teacss.functions.variate(teacss.functions["color"+color[0]],color[1]-1);
    }
    if (color && c2)
        color = teacss.functions.variate(teacss.functions["color"+color],c2-1);
    return color;
}
    
function color_variations(color,brightness,saturation) {
    if (!color) color = 'white';
    var hash = color.toString()+"_"+brightness+"_"+saturation;
    if (variations_cache[hash]) return variations_cache[hash];
    
    var base_hsl = color.toHSL();
    var h = base_hsl.h;
    var s = base_hsl.s;
    var l = base_hsl.l;
    
    var res = [];
    for (var i=0;i<14;i++) {
        var delta = Math.abs(i * (i-13))/ 42.0 * (l-50)/50.0*20.0;
        var part = teacss.Color.functions.hsl(h,s,(i+1)*100.0/15.0+delta);
        res[i] = part;
    }
    variations_cache[hash] = res;
    return res;
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/color-variate.js
};
teacss.parsed[_root_+"common/utils.js"] = {func:(function(){with (teacss.functions){
teacss.cache = teacss.cache || function (data,addColors,f) {
    if (teacss.building) return f();
    
    if (addColors) {
        dataCopy = {};
        if (data) for (var key in data) dataCopy[key] = data[key];
        data = dataCopy;
        data._color1 = teacss.functions.color1;
        data._color2 = teacss.functions.color2;
        data._color3 = teacss.functions.color3;
    }
    
    var me = teacss.cache;
    var json = JSON.stringify(data);
    var selector = tea.Style.current.getSelector();
    
    if (me[selector] &&
        json==me[selector].json &&
        teacss.tea.document==me[selector].document &&
        !teacss.image.deferredUpdate
    ) {
        return me[selector].value;
    } else {
        me[selector] = {json:json,document:teacss.tea.document,value:f()};
        return me[selector].value;
    }
}

    
teacss.functions.extend = function(obj1, obj2) {
    for (var p in obj2) {
        try {
            if ( obj2[p] && obj2[p].constructor==Object) {
                if (obj1) obj1[p] = teacss.functions.extend(obj1[p] || {}, obj2[p]);
            } else {
                if (obj1) obj1[p] = obj2[p];
            }
        } catch(e) {
            obj1[p] = obj2[p];
        }
    }
    return obj1;
}    

teacss.functions.widgets = {};
teacss.functions.pages = {};
teacss.functions.global = teacss.functions;
teacss.functions.type_mixin = function (sel) {
    var mixin = function (args) {
        // if run w/out selector and we have default
        if (!this.selector && sel) {
            return tea.rule(sel,function(){ 
                mixin.call(this,args) 
            });
        }
        // search for type function
        var type = args ? args.type : false;
        var f = mixin[type];
        // else call default one
        if (!f) f = mixin.default;
        if (f && f.call) return f.apply(this,arguments);
    };
    return mixin;
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/utils.js
};
teacss.parsed[_root_+"common/reset.tea"] = {func:(function(){with (teacss.functions){
reset = function () {
    tea.rule("html, body, div, span, applet, object, iframe,\n"+
    "h1, h2, h3, h4, h5, h6, p, blockquote, pre,\n"+
    "a, abbr, acronym, address, big, cite, code,\n"+
    "del, dfn, em, img, ins, kbd, q, s, samp,\n"+
    "small, strike, strong, sub, sup, tt, var,\n"+
    "b, u, i, center,\n"+
    "dl, dt, dd, ol, ul, li,\n"+
    "fieldset, form, label, legend,\n"+
    "table, caption, tbody, tfoot, thead, tr, th, td,\n"+
    "article, aside, canvas, details, embed,\n"+
    "figure, figcaption, footer, header, hgroup,\n"+
    "menu, nav, output, ruby, section, summary,\n"+
    "time, mark, audio, video",function(){
        tea.rule("margin: 0",'');
        tea.rule("padding: 0",'');
        tea.rule("border: 0",'');
        tea.rule("font-size: 100%",'');
        tea.rule("vertical-align: baseline",'');
    });
    tea.rule("body",function(){
        tea.rule("line-height: 1",'');
    });
    tea.rule("ol, ul",function(){
        tea.rule("list-style: none",'');
    });
    tea.rule("table",function(){
        tea.rule("border-collapse: collapse",'');
        tea.rule("border-spacing: 0",'');
    });
    tea.rule("caption, th, td",function(){
        tea.rule("text-align: left",'');
        tea.rule("font-weight: normal",'');
        tea.rule("vertical-align: middle",'');
    });
    tea.rule("q, blockquote",function(){
        tea.rule("quotes: none",'');
        tea.rule("&:before, &:after",function(){
            tea.rule("content: \"\"",'');
            tea.rule("content: none",'');
        });
    });
    tea.rule("a img",function(){
        tea.rule("border: none",'');
    });
    tea.rule("article, aside, details, figcaption, figure,\n"+
    "footer, header, hgroup, menu, nav, section",function(){
        tea.rule("display: block",'');
    });
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/reset.tea
};
teacss.parsed[_root_+"common/base.tea"] = {func:(function(){with (teacss.functions){
clearfix = function () {
    tea.rule("*zoom: 1",'');
    tea.rule("&:before,\n"+
    "&:after",function(){
        tea.rule("display: table",'');
        tea.rule("content: \"\"",'');
    });
    tea.rule("&:after",function(){
        tea.rule("clear: both",'');
    });
}

placeholder = function (color) {
    color = color || "#999";
    tea.rule(":-moz-placeholder",function(){
        tea.rule("color: "+(color),'');
    });
    tea.rule("::-webkit-input-placeholder",function(){
        tea.rule("color: "+(color),'');
    });
}

tab_focus = function () {
    // Default
    tea.rule("outline: thin dotted",'');
    // Webkit
    tea.rule("outline: 5px auto -webkit-focus-ring-color",'');
    tea.rule("outline-offset: -2px",'');
}

reset_filter = function () {
    tea.rule("filter: e(%(\"progid:DXImageTransform.Microsoft.gradient(enabled = false)\"))",'');
}   

size = function (w,h) {
    tea.rule("width: "+(w)+"px",'');
    tea.rule("height: "+(h)+"px",'');
}

logo = function (url) {
    var img = image(url);
    tea.rule("display: block",'');
    tea.rule("background: url("+(img.src)+") no-repeat 50% 50%",'');
    tea.rule("width: "+(img.width)+"px",'');
    tea.rule("height: "+(img.height)+"px",'');
    tea.rule("text-indent: -999em",'');
    return img;
}

ie7_inline_block = function () {
    tea.rule("*display: inline",''); /* IE7 inline-block hack */
    tea.rule("*zoom: 1",'');
}

ie7_restore_left_whitespace = function () {
    tea.rule("*margin-left: .3em",'');

    tea.rule("&:first-child",function(){
        tea.rule("*margin-left: 0",'');
    });
}

ie7_restore_right_whitespace = function () {
    tea.rule("*margin-right: .3em",'');

    tea.rule("&:last-child",function(){
        tea.rule("*margin-left: 0",'');
    });
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/base.tea
};
teacss.parsed[_root_+"common/gradient.tea"] = {func:(function(){with (teacss.functions){
gradient = {}
gradient.bar = function (primaryColor, secondaryColor) {
    gradient.vertical.call(this, primaryColor, secondaryColor);
    tea.rule("border-color: "+(secondaryColor)+" "+(secondaryColor)+" "+(darken(secondaryColor,15)),'');
    tea.rule("border-color: rgba(0,0,0,0.1) rgba(0,0,0,0.1) "+(fadein("rgba(0,0,0,0.1)", 15)),'');
}
gradient.horizontal = function (startColor,endColor) {
    startColor = startColor || '#555'; endColor = endColor || '#333';
    tea.rule("background-color: "+(endColor),'');
    tea.rule("background-image: -moz-linear-gradient(left, "+(startColor)+", "+(endColor)+")",''); // FF 3.6+
    tea.rule("background-image: -ms-linear-gradient(left, "+(startColor)+", "+(endColor)+")",''); // IE10
    tea.rule("background-image: -webkit-gradient(linear, 0 0, 100% 0, from("+(startColor)+"), to("+(endColor)+"))",''); // Safari 4+, Chrome 2+
    tea.rule("background-image: -webkit-linear-gradient(left, "+(startColor)+", "+(endColor)+")",''); // Safari 5.1+, Chrome 10+
    tea.rule("background-image: -o-linear-gradient(left, "+(startColor)+", "+(endColor)+")",''); // Opera 11.10
    tea.rule("background-image: linear-gradient(left, "+(startColor)+", "+(endColor)+")",''); // Le standard
    tea.rule("background-repeat: repeat-x",'');
    tea.rule("filter: e(%(\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)\","+(startColor)+","+(endColor)+"))",''); // IE9 and down
}
gradient.vertical = function (startColor, endColor) {
    startColor = startColor || '#555'; endColor = endColor || '#333';
    tea.rule("background-color: "+(mix(startColor, endColor, 60)),'');
    tea.rule("background-image: -moz-linear-gradient(top, "+(startColor)+", "+(endColor)+")",''); // FF 3.6+
    tea.rule("background-image: -ms-linear-gradient(top, "+(startColor)+", "+(endColor)+")",''); // IE10
    tea.rule("background-image: -webkit-gradient(linear, 0 0, 0 100%, from("+(startColor)+"), to("+(endColor)+"))",''); // Safari 4+, Chrome 2+
    tea.rule("background-image: -webkit-linear-gradient(top, "+(startColor)+", "+(endColor)+")",''); // Safari 5.1+, Chrome 10+
    tea.rule("background-image: -o-linear-gradient(top, "+(startColor)+", "+(endColor)+")",''); // Opera 11.10
    tea.rule("background-image: linear-gradient(top, "+(startColor)+", "+(endColor)+")",''); // The standard
    tea.rule("background-repeat: repeat-x",'');
    tea.rule("filter: e(%(\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)\","+(startColor)+","+(endColor)+"))",''); // IE9 and down
}
gradient.directional = function (startColor, endColor, deg) {
    startColor = startColor || '#555'; endColor = endColor || '#333'; deg = deg || '45deg';
    tea.rule("background-color: "+(endColor),'');
    tea.rule("background-repeat: repeat-x",'');
    tea.rule("background-image: -moz-linear-gradient("+(deg)+", "+(startColor)+", "+(endColor)+")",''); // FF 3.6+
    tea.rule("background-image: -ms-linear-gradient("+(deg)+", "+(startColor)+", "+(endColor)+")",''); // IE10
    tea.rule("background-image: -webkit-linear-gradient("+(deg)+", "+(startColor)+", "+(endColor)+")",''); // Safari 5.1+, Chrome 10+
    tea.rule("background-image: -o-linear-gradient("+(deg)+", "+(startColor)+", "+(endColor)+")",''); // Opera 11.10
    tea.rule("background-image: linear-gradient("+(deg)+", "+(startColor)+", "+(endColor)+")",''); // The standard
}
gradient.vertical_three_colors = function (startColor, midColor, colorStop, endColor) {
    startColor = startColor || '#00b3ee'; midColor = midColor || '#7a43b6'; colorStop = colorStop || '50%'; endColor = endColor || '#c3325f';
    tea.rule("background-color: "+(mix(midColor, endColor, 80)),'');
    tea.rule("background-image: -webkit-gradient(linear, 0 0, 0 100%, from("+(startColor)+"), color-stop("+(colorStop)+", "+(midColor)+"), to("+(endColor)+"))",'');
    tea.rule("background-image: -webkit-linear-gradient("+(startColor)+", "+(midColor)+" "+(colorStop)+", "+(endColor)+")",'');
    tea.rule("background-image: -moz-linear-gradient(top, "+(startColor)+", "+(midColor)+" "+(colorStop)+", "+(endColor)+")",'');
    tea.rule("background-image: -ms-linear-gradient("+(startColor)+", "+(midColor)+" "+(colorStop)+", "+(endColor)+")",'');
    tea.rule("background-image: -o-linear-gradient("+(startColor)+", "+(midColor)+" "+(colorStop)+", "+(endColor)+")",'');
    tea.rule("background-image: linear-gradient("+(startColor)+", "+(midColor)+" "+(colorStop)+", "+(endColor)+")",'');
    tea.rule("background-repeat: no-repeat",'');
    tea.rule("filter: e(%(\"progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)\","+(startColor)+","+(endColor)+"))",''); // IE9 and down, gets no color-stop at all for proper fallback
}
gradient.radial = function (innerColor, outerColor) {
    innerColor = innerColor || '#555'; outerColor = outerColor || '#333';
    tea.rule("background-color: "+(outerColor),'');
    tea.rule("background-image: -webkit-gradient(radial, center center, 0, center center, 460, from("+(innerColor)+"), to("+(outerColor)+"))",'');
    tea.rule("background-image: -webkit-radial-gradient(circle, "+(innerColor)+", "+(outerColor)+")",'');
    tea.rule("background-image: -moz-radial-gradient(circle, "+(innerColor)+", "+(outerColor)+")",'');
    tea.rule("background-image: -ms-radial-gradient(circle, "+(innerColor)+", "+(outerColor)+")",'');
    tea.rule("background-repeat: no-repeat",'');
    // Opera cannot do radial gradients yet
}
gradient.striped = function (color, angle) {
    angle = angle || '-45deg';
    tea.rule("background-color: "+(color),'');
    tea.rule("background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent))",'');
    tea.rule("background-image: -webkit-linear-gradient("+(angle)+", rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent)",'');
    tea.rule("background-image: -moz-linear-gradient("+(angle)+", rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent)",'');
    tea.rule("background-image: -ms-linear-gradient("+(angle)+", rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent)",'');
    tea.rule("background-image: -o-linear-gradient("+(angle)+", rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent)",'');
    tea.rule("background-image: linear-gradient("+(angle)+", rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent)",'');
}
gradient.stops = function (stops,from) {
    {
        from = from || 'top';

        var stops_css = [];
        for (var i=0;i<stops.length;i++) {
            var stop = stops[i];
            var coord = stop[0];
            var color = stop[1];
            coord = (typeof coord=="number") ? coord + "%" : coord;
            stops_css.push(color.toString() + " " + coord);
        }
        stops_css = stops_css.join(", ");
    }
    tea.rule("background-image: linear-gradient("+(from)+", "+(stops_css)+")",'');
    tea.rule("background-image: -o-linear-gradient("+(from)+", "+(stops_css)+")",'');
    tea.rule("background-image: -moz-linear-gradient("+(from)+", "+(stops_css)+")",'');
    tea.rule("background-image: -webkit-linear-gradient("+(from)+", "+(stops_css)+")",'');
    tea.rule("background-image: -ms-linear-gradient("+(from)+", "+(stops_css)+")",'');
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/gradient.tea
};
teacss.parsed[_root_+"common/css3.tea"] = {func:(function(){with (teacss.functions){
border_radius = function (radius) {
    radius = radius || '5px';
    tea.rule("-webkit-border-radius: "+(radius),'');
          tea.rule("-moz-border-radius: "+(radius),'');
                    tea.rule("border-radius: "+(radius),'');
}

// Drop shadows
box_shadow = function (shadow) {
    shadow = shadow || '0 1px 3px rgba(0,0,0,.25)';
    tea.rule("-webkit-box-shadow: "+(shadow),'');
          tea.rule("-moz-box-shadow: "+(shadow),'');
                    tea.rule("box-shadow: "+(shadow),'');
}

// Transitions
transition = function (transition) {
    tea.rule("-webkit-transition: "+(transition),'');
          tea.rule("-moz-transition: "+(transition),'');
            tea.rule("-ms-transition: "+(transition),'');
              tea.rule("-o-transition: "+(transition),'');
                    tea.rule("transition: "+(transition),'');
}

// Transformations
rotate = function (degrees) {
    tea.rule("-webkit-transform: rotate("+(degrees)+"deg)",'');
          tea.rule("-moz-transform: rotate("+(degrees)+"deg)",'');
            tea.rule("-ms-transform: rotate("+(degrees)+"deg)",'');
              tea.rule("-o-transform: rotate("+(degrees)+"deg)",'');
                    tea.rule("transform: rotate("+(degrees)+"deg)",'');
}
scale = function (ratio) {
    tea.rule("-webkit-transform: scale("+(ratio)+")",'');
          tea.rule("-moz-transform: scale("+(ratio)+")",'');
            tea.rule("-ms-transform: scale("+(ratio)+")",'');
              tea.rule("-o-transform: scale("+(ratio)+")",'');
                    tea.rule("transform: scale("+(ratio)+")",'');
}
translate = function (x,y) {
    x = x || 0; y = y || 0;
    tea.rule("-webkit-transform: translate("+(x)+", "+(y)+")",'');
          tea.rule("-moz-transform: translate("+(x)+", "+(y)+")",'');
            tea.rule("-ms-transform: translate("+(x)+", "+(y)+")",'');
              tea.rule("-o-transform: translate("+(x)+", "+(y)+")",'');
                    tea.rule("transform: translate("+(x)+", "+(y)+")",'');
}
skew = function (x,y) {
    tea.rule("-webkit-transform: translate("+(x)+", "+(y)+")",'');
          tea.rule("-moz-transform: translate("+(x)+", "+(y)+")",'');
            tea.rule("-ms-transform: translate("+(x)+", "+(y)+")",'');
              tea.rule("-o-transform: translate("+(x)+", "+(y)+")",'');
                    tea.rule("transform: translate("+(x)+", "+(y)+")",'');
}
skew = function (x,y) {
    tea.rule("-webkit-transform: skew("+(x)+", "+(y)+")",'');
          tea.rule("-moz-transform: skew("+(x)+", "+(y)+")",'');
            tea.rule("-ms-transform: skew("+(x)+", "+(y)+")",'');
              tea.rule("-o-transform: skew("+(x)+", "+(y)+")",'');
                    tea.rule("transform: skew("+(x)+", "+(y)+")",'');
}

// Background clipping
// Heads up: FF 3.6 and under need "padding" instead of "padding-box"
background_clip = function (clip) {
    tea.rule("-webkit-background-clip: "+(clip),'');
          tea.rule("-moz-background-clip: "+(clip),'');
                    tea.rule("background-clip: "+(clip),'');
}

// Background sizing
background_size = function (size) {
    tea.rule("-webkit-background-size: "+(size),'');
          tea.rule("-moz-background-size: "+(size),'');
              tea.rule("-o-background-size: "+(size),'');
                    tea.rule("background-size: "+(size),'');
}


// Box sizing
box_sizing = function (boxmodel) {
    tea.rule("-webkit-box-sizing: "+(boxmodel),'');
          tea.rule("-moz-box-sizing: "+(boxmodel),'');
                    tea.rule("box-sizing: "+(boxmodel),'');
}

// User select
// For selecting text on the page
user_select = function (select) {
    tea.rule("-webkit-user-select: "+(select),'');
          tea.rule("-moz-user-select: "+(select),'');
              tea.rule("-o-user-select: "+(select),'');
                    tea.rule("user-select: "+(select),'');
}

// Resize anything
resizable = function (direction) {
    direction = direction || 'both';
    tea.rule("resize: "+(direction),''); // Options: horizontal, vertical, both
    tea.rule("overflow: auto",''); // Safari fix
}

// CSS3 Content Columns
content_columns = function (columnCount, columnGap) {
    columnGap = columnGap || gridColumnGutter;
    tea.rule("-webkit-column-count: "+(columnCount),'');
          tea.rule("-moz-column-count: "+(columnCount),'');
                    tea.rule("column-count: "+(columnCount),'');
    tea.rule("-webkit-column-gap: "+(columnGap),'');
          tea.rule("-moz-column-gap: "+(columnGap),'');
                    tea.rule("column-gap: "+(columnGap),'');
}

box_sizing = function (sizing) {
    tea.rule("box-sizing: "+(sizing),'');
    tea.rule("-moz-box-sizing: "+(sizing),'');
    tea.rule("-webkit-box-sizing: "+(sizing),'');
}

// Opacity
opacity = function (opacity) {
    opacity = opacity || 100;
    tea.rule("opacity: "+(opacity / 100),'');
      tea.rule("filter: e(%(\"alpha(opacity=%d)\", "+(opacity)+"))",'');
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/css3.tea
};
teacss.parsed[_root_+"common/grid.tea"] = {func:(function(){with (teacss.functions){
{
    grid = function(columns,columnWidth,gutterWidth) {
        grid.columnCount = columns;
        grid.columnWidth = columnWidth;
        grid.gutterWidth = gutterWidth;
    }
    grid.columnCount = 16
    grid.columnWidth = 40
    grid.gutterWidth = 20
}

grid_property = function (what) {
    {
        if (what=='container') return grid.container();
        return grid.columns(parseInt(what));
    }
}

container = function (width,sel) {
    if (sel) return tea.rule(sel,function(){container(width)});
    width = width || '900px';
    tea.rule("width: "+(width),'');
    tea.rule("margin: 0 auto",'');
    tea.rule("margin-left: auto !important",'');
    tea.rule("margin-right: auto !important",'');
}

sheetContainer = function (expand) {
    tea.rule("> .container",function(){
        container(sheetWidth);
        clearfix();
    });
    if (!expand) container(sheetWidth);
}

grid.container = function () {
    siteWidth = (grid.columnCount * grid.columnWidth) + (grid.gutterWidth * (grid.columnCount-1))
    container.call(this, siteWidth+'px');
    clearfix.call(this);
}

grid.columns = function (columnSpan) {
    tea.rule("display: inline",'');
    tea.rule("float: left",'');
    tea.rule("width: "+((grid.columnWidth * columnSpan) + (grid.gutterWidth * (columnSpan - 1)))+"px",'');
    tea.rule("margin-left: "+(grid.gutterWidth)+"px",'');

    tea.rule("&:first-child",function(){
        tea.rule("margin-left: 0",'');
    });
}

grid.prepend = function (columnOffset) {
    tea.rule("margin-left:  "+((grid.columnWidth * columnOffset) + (grid.gutterWidth * (columnOffset - 1)))+"px !important",'');
}

grid.append = function (columnOffset) {
    tea.rule("margin-right: "+((grid.columnWidth * columnOffset) + (grid.gutterWidth * (columnOffset - 1)))+"px !important",'');
}

grid.common = function () {
    tea.rule("float:left",'');tea.rule("margin:0 2% 2% 0",'');tea.rule("width:48%",'');
}
grid.ot = function () {
    grid.common.call(this); tea.rule("width: 31.33%",'');
}
grid.tt = function () {
    grid.common.call(this); tea.rule("width: 64.66%",'');
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/grid.tea
};
teacss.parsed[_root_+"common/background.tea"] = {func:(function(){with (teacss.functions){
global.background = type_mixin();

background.default = function (bg,data) {
    var col = (bg ? color(bg.color) : false) || 'transparent';
    tea.rule("background: "+(col),'');
    background_mask.call(this, data.mask,data,col);
}
background.color = background.default;

background.gradient = function (bg,data) {
    var col = color(bg.color);
    var col_2 = color(bg.color_2);

    gradient.vertical.call(this, col,col_2);
    background_mask.call(this, data.mask,data,{top:col,bottom:col_2});
}

background.gradientTop = function (bg) {
    tea.rule("background: "+(bg.color),'');
    gradient.stops([ [0,color(bg.shadow_color)],[bg.gradientSize,color(bg.color)] ]);
}

background.fullSize = function (bg) {
    tea.rule("background: url("+(bg.texture)+") 50% 0%",'');
}

{
    Canvas.effects.pattern = Canvas.effects.pattern || function (bg) {
        var gl = this.gl;
        gl.patternShader = gl.patternShader || new Shader(gl,null,[
            'uniform sampler2D tex0;',
            'uniform vec4 c1,c2;',
            'uniform float transparency;',
            'varying vec2 texCoord;',
            'void main() {',
                'vec4 tex = texture2D(tex0, texCoord);',
                'vec4 c3 = c1 * (1.0 - tex.r * (1.0-transparency)) + c2 * tex.r * (1.0-transparency);',
                'gl_FragColor = c3;',
            '}'        
        ].join('\n'));

        var col = teacss.Color.parse(color(bg.pattern_color));
        col = [col.rgb[0]/255,col.rgb[1]/255,col.rgb[2]/255,col.alpha];

        var color_2 = bg.pattern_color_2;
        if (!color_2) {
            color_2 = 'white';
        }

        var col2 = teacss.Color.parse(color(color_2));
        col2 = [col2.rgb[0]/255,col2.rgb[1]/255,col2.rgb[2]/255,col2.alpha];

        var transparency = bg.transparency ? Number(bg.transparency)/100.0 : 0; 

        this.draw3D(gl["patternShader"],{tex0:this.getTexture()},{
            c1: col,
            c2: col2,
            transparency:  transparency
        });
        this.setState('texture');
        return this;
    }
}


background.pattern = function (bg,data) {
    {
        if (!bg.pattern) return 'transparent';
        var canvas = teacss.cache(bg,true,function(){
            var canvas = new Canvas(bg.pattern);
            canvas.pattern(bg);
            return canvas.preview();
        });
        canvas.background();
        background_mask(data.mask,data,canvas);
    }
}

background.smart_text = function (bg,data) {
    tea.rule("background-repeat: no-repeat",'');    
    {
        bg = bg || {};
        var canvas = teacss.cache(bg,true,function(){
            var canvas = new Canvas(bg.width||500,bg.height||100);
            var fabricCanvas = new fabric.TextCanvas(canvas.getCanvas2d());
            fabricCanvas.setValue(bg);
            canvas.setState('canvas');
            return canvas.preview();
        });
        canvas.background();
    }
}

}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/background.tea
};
teacss.parsed[_root_+"common/background_mask.tea"] = {func:(function(){with (teacss.functions){
global.background_mask = type_mixin();

background_mask.spikes = function (mask,data,canvas_or_color) {
    {
        if (!mask) return;
        
        mask = mask || {};
        
        var size = parseFloat(mask.size) || 15;
        var h = size + 20;
        
        var top, bottom;
        if (mask.position=="both") {
            top = bottom = true;
        } else if (mask.position=="bottom") {
            bottom = true;
        } else {
            top = true;
        }
        
        var bg_pos = (bottom && !top) ? "left bottom" : "left top";
        {
            tea.rule("position: relative",'');
            tea.rule("background-position: "+(bg_pos),'');
            tea.rule("box-shadow: none !important",'');
        }
        
        function draw(pos) {
            if (pos=='bottom') {
                var y0 = 0;
                var dy = size;
                var where = 'after';
                
                if (top) {
                    var ch = 0;
                    if (data.layout && data.layout.height) {
                        ch = parseFloat(data.layout.height);
                    }
                    var off = ch;
                } else {
                    var off = 0;
                }
            } else {
                var y0 = h;
                var dy = -size;
                var where = 'before';
                var off = -h;
            }
            
            {
                tea.rule("&:"+(where)+"",function(){
                    tea.rule("z-index: 1",'');
                    tea.rule("content: \"\"",'');
                    tea.rule("position: absolute",'');
                    tea.rule("display: block",'');
                    tea.rule("left: 0",''); tea.rule("right: 0",'');
                    tea.rule(""+(pos)+": -"+(h)+"px",'!'); 
                    tea.rule("height: "+(h)+"px",'');
                    
                    {
                        var key = {mask:mask,bg:data.background,shadow:data.shadow,layout:data.layout};
                        var canvas = teacss.cache(key,true,function(){
                            var canvas = new Canvas(1920,h);
                            canvas.draw2D(function(ctx){
                                ctx.translate(0,-off);

                                ctx.beginPath();
                                ctx.moveTo(0,y0-dy+off);

                                for (var i=0;i<1920;i+=size*2) {
                                    ctx.lineTo(i,y0+off);
                                    ctx.lineTo(i+size,y0+dy+off);
                                    ctx.lineTo(i+size*2,y0+off);
                                }
                                ctx.lineTo(i+size*2,y0-dy+off);
                                ctx.lineTo(0,y0-dy+off);

                                if (canvas_or_color instanceof Canvas) {
                                    var pat = ctx.createPattern(canvas_or_color.backgroundCanvas,"repeat");
                                    ctx.fillStyle = pat;
                                } else {
                                    var fill = canvas_or_color;
                                    
                                    if (fill[pos])
                                        ctx.fillStyle = fill[pos];
                                    else
                                        ctx.fillStyle = fill;
                                }

                                if (data.shadow) {
                                    ctx.shadowColor = color(data.shadow.color) || 'rgba(0,0,0,0.3)';
                                    ctx.shadowBlur = data.shadow.blur || 2;
                                    ctx.shadowOffsetX = data.shadow.x || 3;
                                    ctx.shadowOffsetY = data.shadow.y || 3;   
                                }
                                ctx.fill();
                            });
                            return canvas.preview();
                        });
                        canvas.background();
                    }
                });
            }
        }
        
        if (top) draw.call(this,'top');
        if (bottom) draw.call(this,'bottom');
    }
}

}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/background_mask.tea
};
teacss.parsed[_root_+"common/effects.tea"] = {func:(function(){with (teacss.functions){
{
    teacss.functions.switcherMixin = function (def) {
        var func = function (data) {
            var f;
            if (data && data.type) f = func[data.type];
            if (f) 
                f.apply(this,arguments); 
            else if (def) 
                func[def].apply(this,arguments);
        }
        return func;
    }
}

effects = function (list) {
    {
        if (list) for (var i=0;i<list.length;i++) {
            var data = list[i];
            if (data && data.type && effects[data.type]) effects[data.type].call(this,data.value);
        }
    }
}

effects.shadow = switcherMixin();

effects.shadow.ears = function (data) {
    tea.rule("position: relative",'');
    
    var place = (data.position=="bottom") ? "after":"before";
    tea.rule("&:"+(place)+"",function(){
        tea.rule("content: \"\"",'');
        tea.rule("display: block",'');
        tea.rule("position: absolute",'');
        tea.rule("z-index: 10",'');
        
        if (place=="before")
            tea.rule("top: 0",'');
        else
            tea.rule("bottom: 0",'');
        
        tea.rule("left: 0",''); tea.rule("right: 0",'');
        tea.rule("height: 150px",'');
        tea.rule("background: 50% 50% no-repeat",'');
        
        {
            if (teacss.cache(data) && !teacss.building) return;
        
            var width = parseFloat(sheetWidth);
            var canvas = new Canvas(width,150);
            canvas.draw2D(function(ctx){
                
                ctx.shadowOffsetX = 0;  
                ctx.shadowOffsetY = 10;  
                ctx.shadowBlur = 10;  
                ctx.shadowColor = "rgba(0, 0, 0, 1.0)";
                
                if (place=="after") ctx.transform(1,0,0,-1,0,150);
                
                var half = width / 2;
                
                ctx.beginPath();
                ctx.lineTo(0,-30);
                ctx.lineTo(half,30);
                ctx.lineTo(width,-30);
                ctx.closePath();
                
                ctx.fill();
                
                var grad = ctx.createLinearGradient(0, 0, width, 0);
                grad.addColorStop(0,'transparent');
                grad.addColorStop(0.5,'#000');
                grad.addColorStop(1,'transparent');
                
                ctx.globalCompositeOperation = "destination-out";
                ctx.fillStyle = grad;
                ctx.fillRect(0,-20,width,150);
            
            });
            canvas.background();
        }
    });
}

effects.shadow.round = function (data) {
    tea.rule("position: relative",'');
    var place = (data.position=="bottom") ? "after":"before";
    tea.rule("&:"+(place)+"",function(){
        tea.rule("content: \"\"",'');
        tea.rule("display: block",'');
        tea.rule("position: absolute",'');
        tea.rule("z-index: 10",'');
        
        if (place=="before")
            tea.rule("top: 0",'');
        else
            tea.rule("bottom: 0",'');
        
        tea.rule("left: 0",''); tea.rule("right: 0",'');
        tea.rule("height: 50px",'');
        tea.rule("background: 50% 50% no-repeat",'');
        
        {
            if (teacss.cache(data) && !teacss.building) return;
        
            var width = parseFloat(sheetWidth)+400;
            var canvas = new Canvas(width,50);
            canvas.draw2D(function(ctx){
                ctx.shadowOffsetX = 0;  
                ctx.shadowOffsetY = 0;  
                ctx.shadowBlur = 20;  
                ctx.shadowColor = "rgba(0, 0, 0, 0.5)";
                
                if (place=="after") ctx.transform(1,0,0,-1,0,50);
                
                ctx.beginPath();
                ctx.moveTo(0,-20);
                ctx.bezierCurveTo(30,0,width-30,0,width-30,-20);
                ctx.closePath();
                
                ctx.fill();
            
            });
            canvas.background();
        }
    });
}


effects.glare = function (data) {
    tea.rule("position: relative",'');
    
    tea.rule("&:before",function(){
        {
            var left = data && data.margin && data.margin.left != undefined;
            var right = data && data.margin && data.margin.right != undefined;
            var marginLeft = left ? data.margin.left : '3px';
            var marginRight = right ? data.margin.right : '3px';
            var radiusLeft = (left && data.margin.left == 0) ? ['0', '0'] : ['2em', '2em'];
            var radiusRight = (right && data.margin.right == 0) ? ['0', '0'] : ['2em', '2em'];
            var borderRadius = radiusLeft[0] + ' ' + radiusRight[0] + ' ' + radiusRight[1] + ' ' + radiusLeft[1];
        }
        
        tea.rule("content: \"\"",'');
        tea.rule("position: absolute",'');                
        tea.rule("left: "+(marginLeft),'');
        tea.rule("right: "+(marginRight),'');
        tea.rule("top: 2px",'');
        tea.rule("height: 0.6em",'');
        tea.rule("border-radius: "+(borderRadius),'');
        gradient.vertical.call(this,  rgba(255,255,255,.4), rgba(255,255,255,0.2));
        tea.rule("background-color: rgba(0, 0, 0, 0)",'');
    });
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/effects.tea
};
teacss.parsed[_root_+"common/icons.tea"] = {func:(function(){with (teacss.functions){
var fontAwesomePath = tea.dir + '../../fonts';

fontAwesome = function () {
    if (fontAwesome.loaded) return;
    fontAwesome.loaded = true;

    tea.rule("@font-face",function(){
        tea.rule("font-family: 'FontAwesome'",'');
        tea.rule("src: url('"+(fontAwesomePath)+"/fontawesome-webfont.eot')",'');
        tea.rule("src: url('"+(fontAwesomePath)+"/fontawesome-webfont.eot?#iefix') format('embedded-opentype'),\n"+
            "url('"+(fontAwesomePath)+"/fontawesome-webfont.woff') format('woff'),\n"+
            "url('"+(fontAwesomePath)+"/fontawesome-webfont.ttf') format('truetype'),\n"+
            "url('"+(fontAwesomePath)+"/fontawesome-webfont.svg#FontAwesome') format('svg')",'');
        tea.rule("font-weight: normal",'');
        tea.rule("font-style: normal",'');
    });
}
fontAwesome.loaded = false;

icon = function (what) {
    fontAwesome();
    
    tea.rule("&:before",function(){
        tea.rule("font-family: FontAwesome",'');
        tea.rule("font-weight: normal",'');
        tea.rule("font-style: normal",'');
        tea.rule("display: inline-block",'');
        tea.rule("text-decoration: inherit",'');
        tea.rule("content: \""+(fontAwesome.map[what])+"\"",'');
    });
    
    tea.rule("display: inline-block",'');
    tea.rule("text-decoration: inherit",'');
}

icon.marker = function (what,size) {
    icon(what);
    size = size || "1.0em";
    tea.rule("position: relative",'');
    tea.rule("&:before",function(){
        tea.rule("position: absolute",'');
        tea.rule("top: 0px",'');
        tea.rule("left: -1.5em",'');
        tea.rule("font-size: "+(size),'');
    });
}

icon.circle = function (color,bg,border,size,padding) {
    padding = padding || 0;
    size = size || 20;
    border = border || "2px solid";
    color = color || "inherit";
    bg = bg || "transparent";
    
    tea.rule("&:before",function(){
        tea.rule("color: "+(color),'');
        tea.rule("background: "+(bg),'');
        tea.rule("width: "+(padding+size)+"px",'');
        tea.rule("height: "+(padding+size)+"px",'');
        tea.rule("border-radius: "+((padding+size+parseFloat(border))/2+1)+"px",'');
        tea.rule("line-height: "+(size+padding)+"px",'');
        tea.rule("font-size: "+(size)+"px",'');
        tea.rule("text-align: center",'');
        tea.rule("border: "+(border),'');
    });
}

icon.generate = function () {
    tea.rule("i.icon",function(){
        icon.call(this, "glass");
    });
    for (var key in fontAwesome.map) {
        tea.rule("i.icon-"+(key)+":before",function(){
            tea.rule("content: \""+(fontAwesome.map[key])+"\"",'');
        });
    }
}

{
    fontAwesome.map = {
        "glass": "\\f000",
        "music": "\\f001",
        "search": "\\f002",
        "envelope-alt": "\\f003",
        "heart": "\\f004",
        "star": "\\f005",
        "star-empty": "\\f006",
        "user": "\\f007",
        "film": "\\f008",
        "th-large": "\\f009",
        "th": "\\f00a",
        "th-list": "\\f00b",
        "ok": "\\f00c",
        "remove": "\\f00d",
        "zoom-in": "\\f00e",
        "zoom-out": "\\f010",
        "off": "\\f011",
        "signal": "\\f012",
        "cog": "\\f013",
        "trash": "\\f014",
        "home": "\\f015",
        "file-alt": "\\f016",
        "time": "\\f017",
        "road": "\\f018",
        "download-alt": "\\f019",
        "download": "\\f01a",
        "upload": "\\f01b",
        "inbox": "\\f01c",
        "play-circle": "\\f01d",
        "repeat": "\\f01e",
        "refresh": "\\f021",
        "list-alt": "\\f022",
        "lock": "\\f023",
        "flag": "\\f024",
        "headphones": "\\f025",
        "volume-off": "\\f026",
        "volume-down": "\\f027",
        "volume-up": "\\f028",
        "qrcode": "\\f029",
        "barcode": "\\f02a",
        "tag": "\\f02b",
        "tags": "\\f02c",
        "book": "\\f02d",
        "bookmark": "\\f02e",
        "print": "\\f02f",
        "camera": "\\f030",
        "font": "\\f031",
        "bold": "\\f032",
        "italic": "\\f033",
        "text-height": "\\f034",
        "text-width": "\\f035",
        "align-left": "\\f036",
        "align-center": "\\f037",
        "align-right": "\\f038",
        "align-justify": "\\f039",
        "list": "\\f03a",
        "indent-left": "\\f03b",
        "indent-right": "\\f03c",
        "facetime-video": "\\f03d",
        "picture": "\\f03e",
        "pencil": "\\f040",
        "map-marker": "\\f041",
        "adjust": "\\f042",
        "tint": "\\f043",
        "edit": "\\f044",
        "share": "\\f045",
        "check": "\\f046",
        "move": "\\f047",
        "step-backward": "\\f048",
        "fast-backward": "\\f049",
        "backward": "\\f04a",
        "play": "\\f04b",
        "pause": "\\f04c",
        "stop": "\\f04d",
        "forward": "\\f04e",
        "fast-forward": "\\f050",
        "step-forward": "\\f051",
        "eject": "\\f052",
        "chevron-left": "\\f053",
        "chevron-right": "\\f054",
        "plus-sign": "\\f055",
        "minus-sign": "\\f056",
        "remove-sign": "\\f057",
        "ok-sign": "\\f058",
        "question-sign": "\\f059",
        "info-sign": "\\f05a",
        "screenshot": "\\f05b",
        "remove-circle": "\\f05c",
        "ok-circle": "\\f05d",
        "ban-circle": "\\f05e",
        "arrow-left": "\\f060",
        "arrow-right": "\\f061",
        "arrow-up": "\\f062",
        "arrow-down": "\\f063",
        "share-alt": "\\f064",
        "resize-full": "\\f065",
        "resize-small": "\\f066",
        "plus": "\\f067",
        "minus": "\\f068",
        "asterisk": "\\f069",
        "exclamation-sign": "\\f06a",
        "gift": "\\f06b",
        "leaf": "\\f06c",
        "fire": "\\f06d",
        "eye-open": "\\f06e",
        "eye-close": "\\f070",
        "warning-sign": "\\f071",
        "plane": "\\f072",
        "calendar": "\\f073",
        "random": "\\f074",
        "comment": "\\f075",
        "magnet": "\\f076",
        "chevron-up": "\\f077",
        "chevron-down": "\\f078",
        "retweet": "\\f079",
        "shopping-cart": "\\f07a",
        "folder-close": "\\f07b",
        "folder-open": "\\f07c",
        "resize-vertical": "\\f07d",
        "resize-horizontal": "\\f07e",
        "bar-chart": "\\f080",
        "twitter-sign": "\\f081",
        "facebook-sign": "\\f082",
        "camera-retro": "\\f083",
        "key": "\\f084",
        "cogs": "\\f085",
        "comments": "\\f086",
        "thumbs-up-alt": "\\f087",
        "thumbs-down-alt": "\\f088",
        "star-half": "\\f089",
        "heart-empty": "\\f08a",
        "signout": "\\f08b",
        "linkedin-sign": "\\f08c",
        "pushpin": "\\f08d",
        "external-link": "\\f08e",
        "signin": "\\f090",
        "trophy": "\\f091",
        "github-sign": "\\f092",
        "upload-alt": "\\f093",
        "lemon": "\\f094",
        "phone": "\\f095",
        "check-empty": "\\f096",
        "bookmark-empty": "\\f097",
        "phone-sign": "\\f098",
        "twitter": "\\f099",
        "facebook": "\\f09a",
        "github": "\\f09b",
        "unlock": "\\f09c",
        "credit-card": "\\f09d",
        "rss": "\\f09e",
        "hdd": "\\f0a0",
        "bullhorn": "\\f0a1",
        "bell": "\\f0a2",
        "certificate": "\\f0a3",
        "hand-right": "\\f0a4",
        "hand-left": "\\f0a5",
        "hand-up": "\\f0a6",
        "hand-down": "\\f0a7",
        "circle-arrow-left": "\\f0a8",
        "circle-arrow-right": "\\f0a9",
        "circle-arrow-up": "\\f0aa",
        "circle-arrow-down": "\\f0ab",
        "globe": "\\f0ac",
        "wrench": "\\f0ad",
        "tasks": "\\f0ae",
        "filter": "\\f0b0",
        "briefcase": "\\f0b1",
        "fullscreen": "\\f0b2",
        "group": "\\f0c0",
        "link": "\\f0c1",
        "cloud": "\\f0c2",
        "beaker": "\\f0c3",
        "cut": "\\f0c4",
        "copy": "\\f0c5",
        "paper-clip": "\\f0c6",
        "save": "\\f0c7",
        "sign-blank": "\\f0c8",
        "reorder": "\\f0c9",
        "list-ul": "\\f0ca",
        "list-ol": "\\f0cb",
        "strikethrough": "\\f0cc",
        "underline": "\\f0cd",
        "table": "\\f0ce",
        "magic": "\\f0d0",
        "truck": "\\f0d1",
        "pinterest": "\\f0d2",
        "pinterest-sign": "\\f0d3",
        "google-plus-sign": "\\f0d4",
        "google-plus": "\\f0d5",
        "money": "\\f0d6",
        "caret-down": "\\f0d7",
        "caret-up": "\\f0d8",
        "caret-left": "\\f0d9",
        "caret-right": "\\f0da",
        "columns": "\\f0db",
        "sort": "\\f0dc",
        "sort-down": "\\f0dd",
        "sort-up": "\\f0de",
        "envelope": "\\f0e0",
        "linkedin": "\\f0e1",
        "undo": "\\f0e2",
        "legal": "\\f0e3",
        "dashboard": "\\f0e4",
        "comment-alt": "\\f0e5",
        "comments-alt": "\\f0e6",
        "bolt": "\\f0e7",
        "sitemap": "\\f0e8",
        "umbrella": "\\f0e9",
        "paste": "\\f0ea",
        "lightbulb": "\\f0eb",
        "exchange": "\\f0ec",
        "cloud-download": "\\f0ed",
        "cloud-upload": "\\f0ee",
        "user-md": "\\f0f0",
        "stethoscope": "\\f0f1",
        "suitcase": "\\f0f2",
        "bell-alt": "\\f0f3",
        "coffee": "\\f0f4",
        "food": "\\f0f5",
        "file-text-alt": "\\f0f6",
        "building": "\\f0f7",
        "hospital": "\\f0f8",
        "ambulance": "\\f0f9",
        "medkit": "\\f0fa",
        "fighter-jet": "\\f0fb",
        "beer": "\\f0fc",
        "h-sign": "\\f0fd",
        "plus-sign-alt": "\\f0fe",
        "double-angle-left": "\\f100",
        "double-angle-right": "\\f101",
        "double-angle-up": "\\f102",
        "double-angle-down": "\\f103",
        "angle-left": "\\f104",
        "angle-right": "\\f105",
        "angle-up": "\\f106",
        "angle-down": "\\f107",
        "desktop": "\\f108",
        "laptop": "\\f109",
        "tablet": "\\f10a",
        "mobile-phone": "\\f10b",
        "circle-blank": "\\f10c",
        "quote-left": "\\f10d",
        "quote-right": "\\f10e",
        "spinner": "\\f110",
        "circle": "\\f111",
        "reply": "\\f112",
        "github-alt": "\\f113",
        "folder-close-alt": "\\f114",
        "folder-open-alt": "\\f115",
        "expand-alt": "\\f116",
        "collapse-alt": "\\f117",
        "smile": "\\f118",
        "frown": "\\f119",
        "meh": "\\f11a",
        "gamepad": "\\f11b",
        "keyboard": "\\f11c",
        "flag-alt": "\\f11d",
        "flag-checkered": "\\f11e",
        "terminal": "\\f120",
        "code": "\\f121",
        "reply-all": "\\f122",
        "mail-reply-all": "\\f122",
        "star-half-empty": "\\f123",
        "location-arrow": "\\f124",
        "crop": "\\f125",
        "code-fork": "\\f126",
        "unlink": "\\f127",
        "question": "\\f128",
        "info": "\\f129",
        "exclamation": "\\f12a",
        "superscript": "\\f12b",
        "subscript": "\\f12c",
        "eraser": "\\f12d",
        "puzzle-piece": "\\f12e",
        "microphone": "\\f130",
        "microphone-off": "\\f131",
        "shield": "\\f132",
        "calendar-empty": "\\f133",
        "fire-extinguisher": "\\f134",
        "rocket": "\\f135",
        "maxcdn": "\\f136",
        "chevron-sign-left": "\\f137",
        "chevron-sign-right": "\\f138",
        "chevron-sign-up": "\\f139",
        "chevron-sign-down": "\\f13a",
        "html5": "\\f13b",
        "css3": "\\f13c",
        "anchor": "\\f13d",
        "unlock-alt": "\\f13e",
        "bullseye": "\\f140",
        "ellipsis-horizontal": "\\f141",
        "ellipsis-vertical": "\\f142",
        "rss-sign": "\\f143",
        "play-sign": "\\f144",
        "ticket": "\\f145",
        "minus-sign-alt": "\\f146",
        "check-minus": "\\f147",
        "level-up": "\\f148",
        "level-down": "\\f149",
        "check-sign": "\\f14a",
        "edit-sign": "\\f14b",
        "external-link-sign": "\\f14c",
        "share-sign": "\\f14d",
        "compass": "\\f14e",
        "collapse": "\\f150",
        "collapse-top": "\\f151",
        "expand": "\\f152",
        "eur": "\\f153",
        "gbp": "\\f154",
        "usd": "\\f155",
        "inr": "\\f156",
        "jpy": "\\f157",
        "cny": "\\f158",
        "krw": "\\f159",
        "btc": "\\f15a",
        "file": "\\f15b",
        "file-text": "\\f15c",
        "sort-by-alphabet": "\\f15d",
        "sort-by-alphabet-alt": "\\f15e",
        "sort-by-attributes": "\\f160",
        "sort-by-attributes-alt": "\\f161",
        "sort-by-order": "\\f162",
        "sort-by-order-alt": "\\f163",
        "thumbs-up": "\\f164",
        "thumbs-down": "\\f165",
        "youtube-sign": "\\f166",
        "youtube": "\\f167",
        "xing": "\\f168",
        "xing-sign": "\\f169",
        "youtube-play": "\\f16a",
        "dropbox": "\\f16b",
        "stackexchange": "\\f16c",
        "instagram": "\\f16d",
        "flickr": "\\f16e",
        "adn": "\\f170",
        "bitbucket": "\\f171",
        "bitbucket-sign": "\\f172",
        "tumblr": "\\f173",
        "tumblr-sign": "\\f174",
        "long-arrow-down": "\\f175",
        "long-arrow-up": "\\f176",
        "long-arrow-left": "\\f177",
        "long-arrow-right": "\\f178",
        "apple": "\\f179",
        "windows": "\\f17a",
        "android": "\\f17b",
        "linux": "\\f17c",
        "dribbble": "\\f17d",
        "skype": "\\f17e",
        "foursquare": "\\f180",
        "trello": "\\f181",
        "female": "\\f182",
        "male": "\\f183",
        "gittip": "\\f184",
        "sun": "\\f185",
        "moon": "\\f186",
        "archive": "\\f187",
        "bug": "\\f188",
        "vk": "\\f189",
        "weibo": "\\f18a",
        "renren": "\\f18b"     
    }
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/common/icons.tea
};
teacss.parsed[_root_+"content/typography.tea"] = {func:(function(){with (teacss.functions){
global.typography = type_mixin("body");
typography.default = function (data,inherited) {
    {
        data = data || {};
        
        var textFont = data.textFont;
        var headingsFont = data.headingsFont;
        
        var fontSize = parseFloat(data.fontSize);
        var lineHeight = parseFloat(data.lineHeight);
        
        var textColor = color(data.textColor);
        var headingsColor = color(data.headingsColor);
        var linkColor = color(data.linkColor);
        var linkColorHover = color(data.linkColorHover);
        
        if (!inherited) {
            textFont = textFont || '"Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif';
            headingsFont = headingsFont || '"Helvetica Neue", "Helvetica", Helvetica, Arial, sans-serif';
            
            fontSize = fontSize || 12;
            lineHeight = lineHeight || 1.5;
            
            textColor = textColor || "#333";
            linkColor = linkColor || "#337";
            linkColorHover = linkColorHover || darken(linkColor,10);
        }
        
        if (!linkColorHover && linkColor)
            linkColorHover = darken(linkColor,10);
    }
    
    if (textFont)
        tea.rule("font-family: "+(textFont),'');
        
    if (fontSize)
        tea.rule("font-size: "+(fontSize)+"px",'');
        
    if (textColor)
        tea.rule("color: "+(textColor),'');

    if (linkColor) {
        tea.rule("a",function(){
            tea.rule("color: "+(linkColor),'');
            tea.rule("text-decoration: none",'');
            
            tea.rule("&:hover",function(){
                tea.rule("color: "+(linkColorHover),'');
                tea.rule("text-decoration: underline",'');
            });
        });
    }

    if (lineHeight) {
        tea.rule("line-height: "+(lineHeight)+"em",'');
        tea.rule("p",function(){
            tea.rule("margin: 0 0 "+(lineHeight)+"em",'');
        });
        tea.rule("p:last-child",function(){
            tea.rule("margin-bottom: 0",'');
        });
    }
    
    tea.rule(".alignleft",function(){
        tea.rule("float: left",'');
        tea.rule("margin: 0 0.5em 0.5em 0",'');
    });
    tea.rule(".alignright",function(){
        tea.rule("float: right",'');
        tea.rule("margin: 0 0 0.5em 0.5em",'');
    });    
    
    var headings = [30,24,18,14,12,11]
    for (var i=0;i<headings.length;i++) {
        tea.rule("h"+(i+1)+"",function(){
            if (headingsFont)
                tea.rule("font-family: "+(headingsFont),'');
                
            if (headingsColor)
                tea.rule("color: "+(headingsColor),'');
                
            if (lineHeight) {
                var h = headings[i];
                tea.rule("font-size: "+(h/12)+"em",'');
                tea.rule("margin-bottom: "+(12/h*lineHeight)+"em",'');
                tea.rule("line-height: "+(Math.ceil(h/12/lineHeight)*lineHeight*12/h)+"em",'');
            }
        });
    }

    if (!inherited) {
        tea.rule("ul, ol",function(){
            tea.rule("padding: 0",'');
            tea.rule("margin: 0 0 1em 2em",'');
            tea.rule("ul, ol",function(){ tea.rule("margin-bottom: 0",''); });
        });
    
        tea.rule("ul",function(){
            tea.rule("list-style: disc",'');
        });
        
        tea.rule("ol",function(){
            tea.rule("list-style: decimal",'');
        });
    }

    tea.rule("hr",function(){
        if (lineHeight)
            tea.rule("margin: "+(lineHeight)+"em 0",'');
        tea.rule("border: 0",'');
        tea.rule("border-top: 1px solid #e5e5e5",'');
        tea.rule("border-bottom: 1px solid white",'');
    });

    tea.rule("strong",function(){
        tea.rule("font-weight: bold",'');
    });
    
    tea.rule("em",function(){
        tea.rule("font-style: italic",'');
    });

    tea.rule("blockquote",function(){
        if (lineHeight) {
            tea.rule("padding: 0 0 0 "+(lineHeight)+"em",'');
            tea.rule("margin: 0 0 "+(lineHeight)+"em "+(lineHeight)+"em",'');
        }
        tea.rule("border-left: 5px solid "+(color(1,8)),'');
    });
    
    tea.rule(".dropcap",function(){
        tea.rule("float: left",'');
        tea.rule("font-size: 52px",'');
        tea.rule("color: "+(color(1,3)),'');
        tea.rule("line-height: 52px",'');
        tea.rule("text-transform: uppercase",'');
        tea.rule("margin: 0 5px 0 0",'');
    });    
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/typography.tea
};
teacss.parsed[_root_+"content/button.tea"] = {func:(function(){with (teacss.functions){
buttons = function (data) {
    button.call(this, data.button);
    button_extra.call(this, data.button);
    
    for (var key in data.buttons) {
        var sub = data.buttons[key] || {};
        tea.rule("#"+(key)+"",function(){
            if (sub.style) {
                tea.rule("button",function(){
                    button.call(this, sub.style);
                });
            }
            if (sub.margin)
                tea.rule("margin-top: "+(sub.margin),'');
                
            if (sub.align && sub.align!='auto')
                tea.rule("text-align: "+(sub.align),'');
        });
    }
}

global.button = type_mixin("button, a.button, input[type=button], input[type=submit]");
global.button_extra = type_mixin();

button.base = function (data) {
    tea.rule("display: inline-block",'');
    tea.rule("padding: 0.3em 0.7em",'');
    tea.rule("text-align: center",'');
    tea.rule("text-decoration: none",'');
    tea.rule("cursor: pointer",'');
    tea.rule("outline: none",'');
    tea.rule("white-space:nowrap",'');
    tea.rule("width: auto",'');
    tea.rule("height: auto",'');
    tea.rule("line-height: 1em",'');
    
    data = data || {};
    if (data.font)
        tea.rule("font-family: "+(data.font),'');
        
    if (data.fontSize)
        tea.rule("font-size: "+(data.fontSize),'');
    
    tea.rule("&.small",function(){
        tea.rule("font-size: 0.9em",'');
    });
    
    tea.rule("&.large",function(){        
        tea.rule("padding: 0.7em 1.5em",'');
    });    
    
    tea.rule("&.disabled, &[disabled]",function(){
        tea.rule("cursor: default",'');
    });
}

button.colors = function (data) {
    data = data || {};
    var color = data.color;
    var color_2 = data.color_2 || color;
    var text = data.text;
    if (!text) text = ((lightness(color) + lightness(color_2)) / 2 > 74) ? "#333" : "#fff";    
    
    tea.rule("color: "+(text),'');
    if ((lightness(text)) < 74) {
        tea.rule("text-shadow: 0 1px 1px rgba(255,255,255,.75)",'');
    } else {
        tea.rule("text-shadow: 0 -1px 0 rgba(0,0,0,.25)",'');
    }
    
    if (color==color_2) 
        tea.rule("background: "+(color),'');
    else {
        gradient.bar.call(this, color,color_2);
        reset_filter.call(this);    
    }
    
    if (data.opacity) opacity(data.opacity);
}


button.default = function (data) {
    data = data || {};
    button.base.call(this, data);
    
    tea.rule("border: 1px solid #ccc",'');
    tea.rule("border-bottom-color: #bbb",'');
    tea.rule("border-radius: 0.3em",'');
    box_shadow.call(this, 'inset 0 1px 0 rgba(255,255,255,.2), 0 1px 2px rgba(0,0,0,.05)');

    var color_1 = color(data.color || "#eee");
    var color_2 = color(data.color_2 || darken(color_1,10));

    button.colors.call(this, {color:color_1, color_2:color_2});
    tea.rule("&:hover",function(){ 
        button.colors.call(this, {color:color_1});
    });
    tea.rule("&.active, &:active",function(){
        button.colors.call(this, {color:color_1});
    });
    
    tea.rule("&.disabled, &[disabled]",function(){
        opacity.call(this, 65);
        box_shadow.call(this, 'none');        
    });
}

button_extra.default = function (data) {
    {
        var extra = {
            green     :{ color: '#d1e990',             color_2:darken('#d1e990',30) },
            darkgreen :{ color: darken('#62c462',20),  color_2:darken('#51a351',10) },
            orange    :{ color: lighten('orange', 15), color_2:'orange' },
            blue      :{ color: '#5bc0de',             color_2:'#2f96b4' },
            red       :{ color: '#ee5f5b',             color_2:'#bd362f' },
            pink      :{ color: lighten('pink', 15),   color_2:'pink' },
            darkgray  :{ color: "#999",                color_2:"#777" },
            lightgray :{ color: "#eee",                color_2:"#ccc" }        
        }
        for (key in extra) {
            var sel = "."+key;
            if (data && data.preset) {
                if (data.preset==key) sel = ""; else continue;
            }
            {
                tea.rule("&"+(sel)+"",function(){
                    button.colors.call(this, extra[key]);
                    tea.rule("&:hover:not(.disabled)",function(){
                        button.colors.call(this, { color:extra[key].color_2 });
                    });
                    tea.rule("&.active:not(.disabled), &:active:not(.disabled)",function(){
                        button.colors.call(this, { color:lighten(extra[key].color_2,10) });
                    });
                });
            }
        }
    }
}

button.metro = function (data) {
    data = data || {};
    button.base.call(this, data);
    
    tea.rule("border: none",'');
    var color_1 = color(data.color || "#eee");
    button.colors.call(this, {color:color_1});
    tea.rule("&.active, &:active",function(){
        button.colors.call(this, {color:darken(color_1, 10),text:rgba(0,0,0,0.5)});
    });
    tea.rule("&.disabled, &[disabled]",function(){
        button.colors.call(this, {color:darken(color_1, 10),opacity:65});
    });    
}

button_extra.metro = function (data) {
    {
        var extra = {
            green:     "#00a300",
            darkgreen: darken('#62c462',20),
            orange:    lighten('orange', 15),
            blue:      '#3A5498',
            red:       lighten('#BA141A', 20),
            pink:      'pink',
            darkgray:  "#999",
            lightgray: darken("#eee", 10)
        }
        for (key in extra) {
            var sel = "."+key;
            if (data && data.preset) {
                if (data.preset==key) sel = ""; else continue;
            }
            {
                tea.rule("&"+(sel)+"",function(){
                    button.colors.call(this, {color:extra[key]});
                    tea.rule("&:hover",function(){
                        button.colors.call(this, { color:darken(extra[key],20) });
                    });
                    tea.rule("&.active, &:active",function(){
                        button.colors.call(this, { color:lighten(extra[key],10) });
                    });
                });
            }
        }        
    }
}

button.apple = function (data) {
    data = data || {};
    button.base.call(this, data);   
    tea.rule("border-top: 1px solid #bbb",'');
    tea.rule("border-bottom: 1px solid #bbb",'');
    tea.rule("border-radius: 2em",'');
    box_shadow.call(this, 'inset 0 1px 0 rgba(255,255,255,.2), 0 1px 2px rgba(0,0,0,.05)');
    
    var color_1 = color(data.color || "#eee");
    var color_2 = color(data.color_2 || darken(color_1,10));
    
    button.colors.call(this, {color:color_1, color_2:color_2});
    effects.glare.call(this, {margin:{left: '0.3em', right: '0.3em'}});    
    
    tea.rule("&:hover",function(){ 
        button.colors.call(this, {color:color_1});
    });
    tea.rule("&.active, &:active",function(){
        button.colors.call(this, {color:color_1});
    });
    tea.rule("&.disabled, &[disabled]",function(){
        button.colors.call(this, {color:color_1,opacity:65});
        box_shadow.call(this, 'none');
    });
    
    tea.rule("&.small",function(){
        effects.glare.call(this, {margin:{left: '0.6em', right: '0.6em'}});    
    });
    
}
 
button_extra.apple = function (data) {
    {
        var extra = {
            green     :{ color: '#62c462',             color_2:'#51a351' },
            darkgreen :{ color: darken('#62c462',20),  color_2:darken('#51a351',20) },
            orange    :{ color: lighten('orange', 15), color_2:'orange' },
            blue      :{ color: '#5bc0de',             color_2:'#2f96b4' },
            red       :{ color: '#ee5f5b',             color_2:'#bd362f' },
            pink      :{ color: lighten('pink', 15),   color_2:'pink' },
            darkgray  :{ color: "#999",                color_2:"#777" },
            lightgray :{ color: "#eee",                color_2:"#ccc" }        
        }
        for (key in extra) {
            var sel = "."+key;
            if (data && data.preset) {
                if (data.preset==key) sel = ""; else continue;
            }
            {
                tea.rule("&"+(sel)+"",function(){
                    button.colors.call(this, extra[key]);
                    tea.rule("&:hover",function(){
                        button.colors.call(this, { color:extra[key].color_2 });
                    });
                    tea.rule("&.active, &:active",function(){
                        button.colors.call(this, { color:lighten(extra[key].color_2,10) });
                    });
                });
            }
        }
    }
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/button.tea
};
teacss.parsed[_root_+"content/form.tea"] = {func:(function(){with (teacss.functions){
global.form = type_mixin("form");

form.default = function (data) {   

    data = data || {};
    var padding = data.controlPadding || '0.3em';
    var height = 2 * parseFloat(padding) + 1.5 + "em";
    
    tea.rule("margin: 0 0 1.5em",'');
    tea.rule("position: relative",'');
    
    tea.rule("label",function(){
        tea.rule("display: block",'');
        tea.rule("margin-bottom: 0.4em",'');
    });
        
    tea.rule("input, textarea, select",function(){
        tea.rule("display: inline-block",'');
        tea.rule("width: 100%",'');
        tea.rule("height: "+(height),'');
        tea.rule("padding: "+(padding),'');
        tea.rule("margin-bottom: 0.8em",'');
        tea.rule("color: #333",'');
        tea.rule("border: 1px solid #ccc",'');
        tea.rule("border-radius: 0.3em",'');
        tea.rule("font-size: 100%",'');
        box_sizing.call(this, 'border-box');
    });  
    
    tea.rule("textarea",function(){
        tea.rule("height: auto",'');
    });
    
    tea.rule("input[type=\"file\"]",function(){
        tea.rule("height: 2.1em",'');
        tea.rule("line-height: 2.1em",'');
        tea.rule("margin-right: 0",'');
        tea.rule("outline: none",'');
        tea.rule("border: 1px solid #ccc",'');
        tea.rule("border-radius: 0.3em",'');
        box_shadow.call(this, 'inset 0 1px 0 rgba(255,255,255,.2), 0 1px 2px rgba(0,0,0,.05)');        
        button.colors.call(this, {color:'#f5f5f5', color_2:'#eee'});        
    });    
           
    tea.rule("input[type=\"image\"], input[type=\"checkbox\"], input[type=\"radio\"]",function(){
        tea.rule("width: auto",'');
        tea.rule("height: auto",'');
        tea.rule("padding: 0",'');
        tea.rule("margin: 0 0.3em 0 0",'');
        tea.rule("line-height: normal",'');
        tea.rule("border: 0",'');
        tea.rule("cursor: pointer",'');
        tea.rule("border-radius: 0 e(\"\\0/\")",''); // Nuke border-radius for IE9 only
    });
    
    tea.rule("input, textarea",function(){
        box_shadow.call(this, 'inset 0 1px 1px rgba(0,0,0,.075)');
        transition.call(this, 'border linear .2s, box-shadow linear .2s');
    });
    
    tea.rule("input:focus, textarea:focus",function(){
        tea.rule("border-color: rgba(82,168,236,.8)",'');
        box_shadow.call(this, 'inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(82,168,236,.6)');
        tea.rule("outline: 0",'');
        tea.rule("outline: thin dotted \\9",''); /* IE6-8 */
    });
    
    tea.rule("input[type=\"file\"]:focus, input[type=\"checkbox\"]:focus, select:focus",function(){
        box_shadow.call(this, 'none');
        tab_focus.call(this);
        tea.rule("outline: none",'');
    });    
    
    tea.rule("span.error",function(){
        tea.rule("color: "+(darken('red',10)),'');
        tea.rule("position: relative",'');
        tea.rule("display: block",'');
        tea.rule("top: -0.8em",'');
        tea.rule("font-style: italic",'');
        
        if (data.floatErrors) {
            tea.rule("margin-bottom: -1000em",'');
            tea.rule("top: -1.4em",'');
            tea.rule("float: right",'');
            tea.rule("padding: 0.1em 0.3em",'');
            tea.rule("background: white",'');
            tea.rule("border: 1px solid "+(darken('red',10)),'');
            tea.rule("border-radius: 0.3em",'');
        }
    });
    
    
    tea.rule("input.error",function(){
        tea.rule("background: "+(lighten('red',40)),'');
    });
    
    tea.rule(".control-group",function(){
        tea.rule("margin-bottom: 0.8em",'');
        tea.rule("label",function(){
            tea.rule("display: inline-block",'');
            tea.rule("margin: 0.7em 1em 0 0",'');
        });
        tea.rule("p",function(){
            tea.rule("color: #777",'');
            tea.rule("margin: 0 0 -0.6em",'');
            tea.rule("position: relative",'');
            tea.rule("top: -0.6em",'');
        });
    });    
    
    tea.rule("input + fieldset",function(){
        tea.rule("margin-top: 1em",'');
    });
    
    tea.rule("fieldset",function(){
        tea.rule(".legend, legend",function(){
            tea.rule("display: block",'');
            tea.rule("width: 100%",'');
            tea.rule("padding: 0",'');
            tea.rule("margin-bottom: 0.4em",'');
            tea.rule("font-size: 1.3em",'');
            tea.rule("line-height: 1.3em",'');
            tea.rule("color: #333333",'');
            tea.rule("border: 0",'');
            tea.rule("border-bottom: 1px solid #e5e5e5",'');        
        });
    });
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/form.tea
};
teacss.parsed[_root_+"content/form_layout.tea"] = {func:(function(){with (teacss.functions){
global.form_layout = type_mixin("form");

form_layout.default = function () {
}

form_layout.horizontal = function (data) {

    data = data || {};
    labelWidth = data.labelWidth ? parseFloat(data.labelWidth) : 200;

    tea.rule("div.control",function(){
        tea.rule("> label",function(){
            tea.rule("float: left",'');
            tea.rule("width: "+(labelWidth)+"px",'');
            tea.rule("text-align: right",'');
            tea.rule("margin-top: 0.6em",'');
        });
        
        tea.rule("> span",function(){
            tea.rule("display: block",'');
            tea.rule("margin-left: "+(labelWidth+10)+"px",'');
        });
    });
}

form_layout.compact = function (data,style) {

    style = style || {};
    var padding = style.controlPadding || '0.3em';
    var sel = this.selector;

    tea.Script.init('',function(){
        tea.Script.append(donut_root + "js/jquery.js");
        tea.Script.append("{\n"+
"            $(function(){\n"+
"                $(\""+(sel)+"\").find(\"> div > label\").click(function(){\n"+
"                    $(this).next().find(\"input\").focus();\n"+
"                })\n"+
"                $(\""+(sel)+"\").find(\"> div > span > input\").bind(\"focus blur\",function(e){\n"+
"                    var val = $(this).val();\n"+
"                    var label = $(this).parent().prev();\n"+
"                    label.toggle(val || $(this).is(\":focus\") || e.type==\"focus\" ? false:true);\n"+
"                })\n"+
"            });\n"+
"        }",true);
    });    

    tea.rule("> div",function(){
        tea.rule("position: relative",'');
        
        tea.rule("> label",function(){
            tea.rule("position: absolute",'');
            tea.rule("font-weight: bold",'');
            tea.rule("color: #ccc",'');
            tea.rule("left: "+(padding),'');
            tea.rule("top: "+(padding),'');
            tea.rule("cursor: text",'');
            tea.rule("padding-left: 0.1em",'');
            tea.rule("padding-top: 0.1em",'');
        });
    });
}




}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/form_layout.tea
};
teacss.parsed[_root_+"content/testimonial.tea"] = {func:(function(){with (teacss.functions){
global.testimonial = type_mixin();

testimonial.default = function (data) {
}

testimonial.balloon = function (data) {
    tea.rule("blockquote",function(){
        tea.rule("padding: 15px",'');
        tea.rule("background: #eee",'');
        tea.rule("border: 5px solid #ccc",'');
        tea.rule("font-size: 1.2em",'');
        tea.rule("margin-left: 0",'');
        tea.rule("border-radius: 15px",'');
        tea.rule("background: white",'');
        tea.rule("position: relative",'');
        
        tea.rule("&:before",function(){
            tea.rule("border-color: #ccc rgba(0, 0, 0, 0)",'');
            tea.rule("border-style: solid",'');
            tea.rule("border-width: 20px 20px 0",'');
            tea.rule("bottom: -20px",'');
            tea.rule("content: \"\"",'');
            tea.rule("display: block",'');
            tea.rule("left: 40px",'');
            tea.rule("position: absolute",'');
            tea.rule("width: 0",'');
        });
        
        tea.rule("&:after",function(){
            tea.rule("border-color: #fff rgba(0, 0, 0, 0)",'');
            tea.rule("border-style: solid",'');
            tea.rule("border-width: 13px 13px 0",'');
            tea.rule("bottom: -13px",'');
            tea.rule("content: \"\"",'');
            tea.rule("display: block",'');
            tea.rule("left: 47px",'');
            tea.rule("position: absolute",'');
            tea.rule("width: 0",'');
        });        
        
    });
    
    tea.rule(".no-avatar",function(){
        icon.call(this, "user");
        icon.circle.call(this, "#ccc","white","5px solid",50,5);
        tea.rule("&:before",function(){
            tea.rule("vertical-align: middle",'');
            tea.rule("margin-right: 10px",'');
        });
    });
    
    tea.rule(".avatar",function(){
        tea.rule("display: inline-block",'');
        tea.rule("max-width: 50%",'');
        tea.rule("max-height: 100px",'');
        tea.rule("vertical-align: middle",'');
    });
    
    tea.rule(".person-text",function(){
    
        tea.rule("display: inline-block",'');
        tea.rule("vertical-align: middle",'');
    
        tea.rule(".name",function(){
            tea.rule("display: block",'');
            tea.rule("font-size: 2em",'');
            tea.rule("line-height: 1em",'');
            tea.rule("font-weight: bold",'');
            tea.rule("margin-bottom: 0.5em",'');
        });
        
        tea.rule(".position",function(){
            tea.rule("font-size: 1.5em",'');
            tea.rule("line-height: 1em",'');
            tea.rule("display: block",'');
        });
    });
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/testimonial.tea
};
teacss.parsed[_root_+"content/table.tea"] = {func:(function(){with (teacss.functions){
global.table = type_mixin("table");

table.default = function (data) {
    data = data || {striped:true,bordered:true};
    
    tea.rule("max-width: 100%",'');
    tea.rule("border-collapse: collapse",'');
    tea.rule("border-spacing: 0",'');
    
    tea.rule("width: 100%",'');
    tea.rule("margin-bottom: 2em",'');
    
    // Cells
    tea.rule("th,\n"+
    "td",function(){
        tea.rule("padding: 8px",'');
        tea.rule("text-align: left",'');
        tea.rule("border-top: 1px solid #ddd",'');
    });
    tea.rule("th",function(){
        tea.rule("font-weight: bold",'');
        tea.rule("vertical-align: bottom",'');
    });
    tea.rule("td",function(){
        tea.rule("vertical-align: top",'');
    });
    // Remove top border from thead by default
    tea.rule("thead:first-child tr th,\n"+
    "thead:first-child tr td",function(){
        tea.rule("border-top: 0",'');
    });
    // Account for multiple tbody instances
    tea.rule("tbody + tbody",function(){
        tea.rule("border-top: 2px solid #ddd",'');
    });
    
    if (data.condensed) {
        tea.rule("th,td",function(){
            tea.rule("padding: 4px 5px",'');
        });
    }
    
    if (data.bordered) {
        tea.rule("border: 1px solid #ddd",'');
        tea.rule("border-collapse: separate",''); // Done so we can round those corners!
        tea.rule("*border-collapse: collapsed",''); // IE7 can't round corners anyway
        border_radius.call(this, '4px');
        tea.rule("th + th,\n"+
        "td + td,\n"+
        "th + td,\n"+
        "td + th",function(){
            tea.rule("border-left: 1px solid #ddd",'');
        });
        // Prevent a double border
        tea.rule("thead:first-child tr:first-child th,\n"+
        "tbody:first-child tr:first-child th,\n"+
        "tbody:first-child tr:first-child td",function(){
            tea.rule("border-top: 0",'');
        });
        // For first th or td in the first row in the first thead or tbody
        tea.rule("thead:first-child tr:first-child th:first-child,\n"+
        "tbody:first-child tr:first-child td:first-child",function(){
            border_radius.call(this, '4px 0 0 0');
        });
        tea.rule("thead:first-child tr:first-child th:last-child,\n"+
        "tbody:first-child tr:first-child td:last-child",function(){
            border_radius.call(this, '0 4px 0 0');
        });
        // For first th or td in the first row in the first thead or tbody
        tea.rule("thead:last-child tr:last-child th:first-child,\n"+
        "tbody:last-child tr:last-child td:first-child",function(){
            border_radius.call(this, '0 0 0 4px');
        });
        tea.rule("thead:last-child tr:last-child th:last-child,\n"+
        "tbody:last-child tr:last-child td:last-child",function(){
            border_radius.call(this, '0 0 4px 0');
        });
    }
    
    if (data.striped) {
        tea.rule("tbody",function(){
            tea.rule("tr:nth-child(odd) td,\n"+
            "tr:nth-child(odd) th",function(){
                tea.rule("background-color: #f9f9f9",'');
            });
        });
    }
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/table.tea
};
teacss.parsed[_root_+"content/alerts.tea"] = {func:(function(){with (teacss.functions){
global.alerts = type_mixin(".alert")

alerts.base = function () {
    tea.rule("form > &",function(){
        tea.rule("margin-bottom: 1em",'');
    });
}

alerts.default = function () {    
    alerts.base.call(this);
    
    tea.rule("text-shadow: 0 1px 0 rgba(255,255,255,.5)",'');
    tea.rule("color: #333",'');
    tea.rule("border: 1px solid #aaa",'');
    tea.rule("border-radius: 0.3em",'');
    
    tea.rule("padding: 1em 2em 1em 1em",'');    
    tea.rule("background-color: #eee",'');
    tea.rule("font-size: 1.2em",'');

    tea.rule(".close",function(){
        tea.rule("position: relative",'');
        tea.rule("top: -7px",'');
        tea.rule("right: -21px",'');
        tea.rule("line-height: 18px",'');
        tea.rule("float: right",'');
        
        tea.rule("font-size: 0",'');
        icon.call(this, 'remove');
        tea.rule("&:before",function(){
            tea.rule("color: #aaa",'');
            tea.rule("font-size: 14px",'');
        });
    });
    
    tea.rule("&.error",function(){
        tea.rule("color: #900",'');
        tea.rule("border-color: #a99",'');
        tea.rule("background: #faa",'');
    });
    
    tea.rule("&.notice",function(){
        tea.rule("color: #770",'');
        tea.rule("border-color: #aa9",'');
        tea.rule("background: #ffa",'');
    });
    
    tea.rule("&.success",function(){
        tea.rule("color: #070",'');
        tea.rule("border-color: #9a9",'');
        tea.rule("background: #afa",'');
    });    
}

alerts.metro = function () {
    alerts.base.call(this);
    
    tea.rule("padding: 1em 2em 1em 1em",'');    
    tea.rule("background-color: #eee",'');
    tea.rule("font-size: 1.2em",'');

    tea.rule(".close",function(){
        tea.rule("position: relative",'');
        tea.rule("top: -7px",'');
        tea.rule("right: -21px",'');
        tea.rule("line-height: 18px",'');
        tea.rule("float: right",'');
        
        tea.rule("font-size: 0",'');
        icon.call(this, 'remove');
        tea.rule("&:before",function(){
            tea.rule("color: #aaa",'');
            tea.rule("font-size: 14px",'');
        });
    });
    
    tea.rule("&.error",function(){
        tea.rule("color: #900",'');
        tea.rule("border-color: #a99",'');
        tea.rule("background: #faa",'');
    });
    
    tea.rule("&.notice",function(){
        tea.rule("color: #770",'');
        tea.rule("border-color: #aa9",'');
        tea.rule("background: #ffa",'');
    });
    
    tea.rule("&.success",function(){
        tea.rule("color: #070",'');
        tea.rule("border-color: #9a9",'');
        tea.rule("background: #afa",'');
    });
}

alerts.apple = function () {    
    alerts.base.call(this);

    tea.rule("border-radius: 0.8em",'');
    tea.rule("position: relative",'');    
    tea.rule("border: 1px solid rgba(220,220,220,0.6)",'');    
    tea.rule("padding: 1em 2em 1em 1em",'');    
    gradient.vertical.call(this, '#efefef', '#ededed');
    tea.rule("font-size: 1.2em",'');
    
    tea.rule("text-shadow: 0 1px 1px rgba(255,255,255,.5)",'');

    tea.rule(".close",function(){
        tea.rule("position: relative",'');
        tea.rule("top: -7px",'');
        tea.rule("right: -21px",'');
        tea.rule("line-height: 18px",'');
        tea.rule("float: right",'');
        
        
        tea.rule("font-size: 0",'');
        icon.call(this, 'remove');
        tea.rule("&:before",function(){
            tea.rule("color: #999",'');
            tea.rule("font-size: 14px",'');
        });
    });
    
    tea.rule("&.error",function(){
        tea.rule("color: #700",'');
        gradient.vertical.call(this, '#fee', darken('#fee', 20));
    });
    
    tea.rule("&.notice",function(){
        tea.rule("color: #770",'');
        gradient.vertical.call(this, '#ffe', darken('#ffe', 20));
    });
    
    tea.rule("&.success",function(){
        tea.rule("color: #070",'');
        gradient.vertical.call(this, '#efe', darken('#efe', 20));
    });    
    effects.glare.call(this);
}

}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/alerts.tea
};
teacss.parsed[_root_+"content/smart_image.tea"] = {func:(function(){with (teacss.functions){
global.smart_image = type_mixin("form");

{
    global.smartCanvas = global.smartCanvas || function(data) {
        return teacss.cache(data,true,function(){
            var canvas = new teacss.Canvas(data.image)
            var params = {};
            for (var i=1;i<=3;i++) {
                var src = (data["src_"+i] || "").toHSV();
                var dst_val = data["dst_"+i];
                var dst = (color(dst_val) || "").toHSV();

                params["replace"+i] = [
                    src.h / 360,
                    dst.h / 360,
                    dst_val ? data["delta_"+i] / 360 : 0,
                    (dst.s - src.s) / 100
                ];
            }
            canvas.smartReplace(params);
            return canvas.preview();
        });
    }
}


smart_image.default = function (data) {
    data = data || {};
    
    tea.rule("min-width: 50px",'');
    tea.rule("min-height: 50px",'');
    
    {
        var canvas = smartCanvas(data);
        canvas.background();
    }
    
    tea.rule("background-repeat: no-repeat",'');
    tea.rule("width: "+(canvas.width)+"px",'');
    tea.rule("height: "+(canvas.height)+"px",'');
}

smart_image.horizontal = function (data) {
    
    data = data || {};

    tea.rule("position: relative",'');
    tea.rule("height: "+(data.height)+"px",'');
    
    {
        if (!data.image) return;

        var canvas = smartCanvas(data);
        if (!canvas.center) {
            var w = data.right-data.left, h = data.height;
            canvas.center = new teacss.Canvas(w,h);
            canvas.center.draw2D(function(ctx){
                if (canvas.width==data.width) {
                    ctx.drawImage(canvas.getCanvas2d(),data.left,0,w,h,0,0,w,h);
                }
            });
            canvas.center.preview();
        }
        var center = canvas.center;
    }
    
    tea.rule("&:before, &:after",function(){
        canvas.background();
    });
    
    tea.rule(".in",function(){
        tea.rule("left: "+(data.left)+"px",'');
        tea.rule("right: "+(data.width-data.right)+"px",'');
        center.background();
    });
    
    tea.rule("&:before, &:after, .in",function(){
        tea.rule("position: absolute",'');
        tea.rule("top: 0",''); tea.rule("bottom: 0",'');
        tea.rule("display: \"block\"",'');
        tea.rule("content: \"\"",'');
    });
    
    tea.rule("&:before",function(){
        tea.rule("left: 0",'');
        tea.rule("width: "+(data.left)+"px",'');
        tea.rule("background-position: top left",'');
    });
    
    tea.rule("&:after",function(){
        tea.rule("right: 0",'');
        tea.rule("width: "+(data.width-data.right)+"px",'');
        tea.rule("background-position: top right",'');
    });
    
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/smart_image.tea
};
teacss.parsed[_root_+"content/countdown.tea"] = {func:(function(){with (teacss.functions){
global.countdown = type_mixin(".countdown");
var dir = tea.dir;

countdown.default = function (data) {
    data = data || {};
    var sel = this.selector;
    
    if (!data.noscript) {
        tea.Script.init('',function(){
            tea.Script.append(donut_root + "lib/jquery.js");
            tea.Script.append(donut_root + "lib/countdown/county.js");
            tea.Script.append("{\n"+
"                $(function(){\n"+
"                    $div = $(\""+(sel)+"\");\n"+
"                    time = $div.attr(\"data-time\");\n"+
"                    time = time ? new Date(time) : false;\n"+
"                    $div.empty().county({\n"+
"                        endDateTime: time,\n"+
"                        animation: \""+(data.animation)+"\", \n"+
"                        days: false\n"+
"                    });\n"+
"                })\n"+
"            }",true);
            reloadScript(sel,{time:data.time,animation:data.animation||false});
        });
    }
    
    var color1 = color(data.color1) || "#eee";
    var color2 = color(data.color2) || lighten(color1,20);
    var border = darken(color1,5);
    var text = lightness(color1) < 50 ? '#fff' : '#333';
    var size = data.fontSize || 60;
    
    tea.rule("margin-top: 1em",'');
    tea.rule("text-align: center",'');
    
    tea.rule("> span",function(){
        tea.rule("color: "+(text),'');
        gradient.vertical.call(this, color1,color2);
        
        tea.rule("border-top: 1px solid "+(border),'');
        tea.rule("border-bottom: 1px solid "+(border),'');
        tea.rule("margin: 0 2px",'');
        
        tea.rule("display: inline-block",'');
        tea.rule("height: 1.2em",'');
        tea.rule("line-height: 1.2em",'');

        tea.rule("font-family: Arial",'');
        tea.rule("font-weight: bold",'');
        tea.rule("font-size: "+(size)+"px",'');
        tea.rule("width: 1.6em",'');

        tea.rule("overflow: hidden",'');
        tea.rule("position: relative",'');        
        
        tea.rule("&.separator-left",function(){
            tea.rule("border-left: solid 1px "+(border),'');
        }); 
        
        tea.rule("> span",function(){
            tea.rule("position: relative",'');
            tea.rule("left: 0",''); tea.rule("top: 0",'');
            tea.rule("padding: 0 0.25em",'');
        });           
    });
}

}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/countdown.tea
};
teacss.parsed[_root_+"content/menu.tea"] = {func:(function(){with (teacss.functions){
global.menu = type_mixin(".menu");

menu.base = function (data) {
    data = data || {};
    tea.rule("> ul",function(){
        tea.rule("margin: 0",'');
        tea.rule("padding: 0",'');
    
        tea.rule("> li",function(){
            tea.rule("small",function(){
                tea.rule("display: block",'');
                tea.rule("font-size: 0.85em",'');
            });
            
            if (data.item_width && data.item_width!="auto")
                tea.rule("width: "+(data.item_width),'');
        });
    });
}

menu.default = function (data) {

    menu.base.call(this, data);
    { 
        if (data.inverse) {
            var bg = "#1b1b1b";
            var border = "#252525";
            var bgActive = "#111";
            var shadowActive = false;
            var color = "#999";
            var colorHover = "#fff";
            var colorActive = "#fff";
        } else {
            var bg = "transparent";
            var border = "#d4d4d4";
            var bgActive = "#e5e5e5";
            var shadowActive = "0 3px 8px rgba(0, 0, 0, 0.125) inset";
            var color = "#777";
            var colorHover = "#333";
            var colorActive = "#555";
        }
    }
    
    tea.rule("border: 1px solid "+(border),'');
    tea.rule("background-color: "+(bg),'');
    
    if (data.expand) {
        tea.rule("border-left: none",'');
        tea.rule("border-right: none",'');
    } else {
        tea.rule("border-radius: 4px",'');
        tea.rule("padding: 0 20px",'');
    }
    
    tea.rule("> ul",function(){
        tea.rule("> li",function(){
            tea.rule("display: inline-block",'');
            tea.rule("> a",function(){
                tea.rule("font-size: 1.2em",'');
                tea.rule("display: inline-block",'');
                tea.rule("padding: 1.0em 1.5em",'');
                tea.rule("text-decoration: none",'');
                tea.rule("color: "+(color),'');
                
                tea.rule("&:hover",function(){
                    tea.rule("color: "+(colorHover),'');
                });
            });
        });
        
        tea.rule("> li.current-menu-item",function(){
            tea.rule("> a",function(){
                tea.rule("background-color: "+(bgActive),'');
                if (shadowActive)
                    tea.rule("box-shadow: "+(shadowActive),'');
                tea.rule("color: "+(colorActive),'');
            });
        });        
    
        tea.rule("ul",function(){
            tea.rule("display: none",'');
        });
    });
}

menu.text = function (data) {
    menu.base.call(this, data);
    tea.rule("font-size: 1.3em",'');
    
    tea.rule("> ul",function(){ 
        tea.rule("list-style: none",'');
        
        tea.rule("> li",function(){
            tea.rule("border-top: 3px solid transparent",'');
            tea.rule("display: inline-block",'');
            tea.rule("padding: 2em 0.5em",'');                        
            
            tea.rule(":hover",function(){
                tea.rule("text-decoration: none",'');
                tea.rule("color: "+(color(1,9)),'');
            });
        });
        
        tea.rule(".current-menu-item",function(){
            tea.rule("border-top: 3px solid "+(color(1,8)),'');
            tea.rule("a",function(){
                tea.rule("color: "+(color(1,8)),'');
            });
        });        
    
        tea.rule("ul",function(){
            tea.rule("display: none",'');
        });
    });
}

menu.metro = function (data) {

    menu.base.call(this, data);

    var bg = color(data.background || "#333");
    var inverse = lightness(bg)<70;
    tea.rule("background: "+(bg),'');

    tea.rule("> ul",function(){
        tea.rule("> li",function(){
            tea.rule("display: inline-block",'');
            tea.rule("padding: 1.5em 1.0em",'');
            tea.rule("> a",function(){
                tea.rule("font-size: 1.2em",'');
                tea.rule("color: "+(inverse ? 'white' : 'black'),'');
            });
        });
        
        tea.rule("> li.current-menu-item",function(){
            tea.rule("background: "+(inverse ? lighten(bg,10) : darken(bg,10)),''); 
        });
        
        tea.rule("ul",function(){
            tea.rule("display: none",'');
        });
    });
}

menu.apple = function (data) {

    menu.base.call(this, data);

    var bg = color(data.background || "#333");
    var inverse = lightness(bg)<40;
    var bg_top = lighten(bg,20);
    gradient.vertical.call(this, bg_top,bg);    
    
    tea.rule("> ul",function(){
        tea.rule("> li",function(){
            tea.rule("display: block",'');
            tea.rule("float: left",'');
            tea.rule("> a",function(){
                tea.rule("font-size: 1.2em",'');
                tea.rule("padding: 1.2em 1.5em",'');
                tea.rule("text-decoration: none",'');
                tea.rule("display: block",'');
                
                if (inverse) {
                    tea.rule("color: white",'');
                    tea.rule("text-shadow: 0 0 0.5px #777",'');
                } else {
                    tea.rule("color: black",'');
                    tea.rule("text-shadow: 0 0 0.5px #777",'');
                }
                tea.rule("border-right: 1px solid "+(lighten(bg,10)),'');
            });
            tea.rule("border-right: 1px solid "+(darken(bg,10)),'');
        });
        
        tea.rule("> li:hover",function(){
            gradient.vertical.call(this, lighten(bg_top,3),lighten(bg,3));
        });
        
        tea.rule("> li.current-menu-item",function(){
            if (inverse) {
                gradient.vertical.call(this, "#fff","#eee");
                tea.rule("a",function(){ 
                    tea.rule("color: black",'');
                });
            } else {
                gradient.vertical.call(this, darken(bg,20),darken(bg_top,20));
                tea.rule("a",function(){ 
                    tea.rule("color: white",'');
                });
            }
        });
        
        tea.rule("ul",function(){
            tea.rule("display: none",'');
        });
    });    
}


}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/menu.tea
};
teacss.parsed[_root_+"content/validation.tea"] = {func:(function(){with (teacss.functions){
validation = function (config) {
    if (!config || !config.rules || !config.rules.length) return;
    var sel = this.selector;
    
    tea.Script.init('',function(){
        tea.Script.append(donut_root + "lib/jquery.js");
        tea.Script.append(donut_root + "lib/validation.js");
        tea.Script.append("{\n"+
"            $(function(){\n"+
"                $(\""+(sel)+"\").validation("+(JSON.stringify(config))+");\n"+
"            })\n"+
"        }",true);
        reloadScript(sel,config);
    });
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/content/validation.tea
};
teacss.parsed[_root_+"theme/layout.tea"] = {func:(function(){with (teacss.functions){
global.layout = type_mixin();
global.layout.item = type_mixin();
global.layout.container = type_mixin();
global.layout.border = type_mixin();

layout.border.default = function (border) {
    {
        if (!border) return;
        var width = border.width || 0;
        var cl = border.color!==undefined ? color(border.color) : 'black';
        
        $.each(["left","right","top","bottom"],function(i,where){
            if (border[where]!==false) {
                {
                    tea.rule("border-"+(where)+": "+(width)+" solid "+(cl),'');
                }
            }
        });
    }
}

layout.container.default = function (data) {

    data = data || {};
    if (data.height && data.height!="auto")
        tea.rule("height: "+(data.height),'');
        
    if (data.padding)
        tea.rule("padding: "+(data.padding),'');
        
    tea.rule("min-height: 30px",'');
    
    if (data.layout && data.layout.height)
        tea.rule("height: "+(data.layout.height),'');
        
    if (data.border)
        layout.border.call(this, data.border);
        
    if (data.borderRadius)
        tea.rule("border-radius: "+(data.borderRadius),'');
        
    box_sizing.call(this, 'border-box');
    background.call(this, data.background,data);
    
    tea.rule("> .container",function(){
        tea.rule("position: relative",'');
        tea.rule("margin-bottom: -10px",'');
        tea.rule("> *",function(){
            tea.rule("margin-bottom: 10px",'');
        });
    });
}

var componentWidth = {};

layout.default = function (data) {
    tea.rule("body",function(){
        background.call(this, data.background,data);
    });
    
    eachComponent(function(cmp,id,parent,type){ 
        { 
            if (cmp.children) $.each(cmp.children, function(){
                componentWidth[this.value.id] = componentWidth[id] || 100;
            }); 
        }
    
        if (type=="container" || type=="form") {
            tea.rule("#"+(id)+"",function(){
                var cnt = data.cmp[id] || {};
                layout.container.call(this, cnt);
                if (!parent) {
                    tea.rule("> .container",function(){
                        tea.rule("width: "+(data.sheet.width),'');
                        tea.rule("margin: 0 auto",'');
                    });
                }
            });

            {
                var w = 0;
                var pg = 2;
                var col_num = 12;
                var col_w = (100 - pg * (col_num-1)) / col_num;

                var total = componentWidth[id] || 100;
            }

            if (cmp.children) $.each(cmp.children, function(){
                { 
                    var sid = this.value.id;
                    var sub = data.cmp[sid] ? (data.cmp[sid].layout || {}) : {};
                    var dw = total;
                    var position = false;
                    var auto = false;

                    if (sub.type=="part") {
                        if (sub.part=="of") dw = (total)/4;
                        else if (sub.part=="ot") dw = (total)/3;
                        else if (sub.part=="oh") dw = (total)/2;
                        else if (sub.part=="tt") dw = (total)/3*2;
                        else if (sub.part=="tf") dw = (total)/4*3;
                    } 
                    else if (sub.type!='absolute') {
                        if (sub.column) {
                            var count = sub.column || col_num;
                            dw = count * col_w + pg * (count - 1);
                        } else {
                            auto = true;
                        }
                    }

                    if (w + dw > total) w = 0;
                    var margin = w==0 ? 0 : pg;
                    
                    if (sub.type=="part") margin = 0;
                    
                    w += dw;

                    componentWidth[sid] = dw;
                    var relativeWidth = dw / total * 100;
                    var relativeMargin = margin / total * 100;
                    
                    var pos = sub.position || {};
                }

                tea.rule("body #"+(sid)+"",function(){
                    if (sub.type=='absolute') {
                        tea.rule("display: block",'');
                        tea.rule("position: absolute",'');
                        
                        if (sub.width)
                            tea.rule("width: "+(sub.width),'');
                            
                        tea.rule("left: "+(pos.x || 0),'');
                        tea.rule("top: "+(pos.y || 0),'');
                    
                    } else if (sub.type=='centered') {
                        
                        tea.rule("width: auto",'');
                        tea.rule("display: block",'');
                        tea.rule("margin-left: auto",'');
                        tea.rule("margin-right: auto",'');
                        
                    } else {
                        tea.rule("position: relative",'');
                        if (auto) {
                            tea.rule("display: block",'');
                        } else {
                            tea.rule("display: inline-block",'');
                            tea.rule("width: "+(relativeWidth)+"%",'');
                            tea.rule("margin-left: "+(relativeMargin)+"%",'');
                        }
                    }

                    tea.rule("vertical-align: top",'');
                    if (sub.margin)
                        tea.rule("margin-top: "+(sub.margin),'');
                    if (pos.z)
                        tea.rule("z-index: "+(pos.z),'');
                });

                if (sub.overflow) {
                    tea.rule("#"+(id)+" #"+(sid)+"",function(){
                        tea.rule("margin-bottom: -"+(sub.overflow),'');
                    });
                }
            })
        }
    })
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/theme/layout.tea
};
teacss.parsed[_root_+"theme/logo.tea"] = {func:(function(){with (teacss.functions){
global.logo = type_mixin(".logo");

logo.default = function (data) {
    tea.rule("display: block",'');
    
    tea.rule("&:after",function(){
        tea.rule("content: \"\"",'');
        tea.rule("display: block",'');
        tea.rule("background: gray",'');
        tea.rule("width: 100px",'');
        tea.rule("height: 100px",'');
        tea.rule("border: 1px solid black",'');
    });
}

logo.image = function (data) {
    var img = image(data.image);
    tea.rule("display: block",'');
    if (img.src)
        tea.rule("background: url("+(img.src)+") no-repeat 0 50%",'');
    tea.rule("width: "+(img.width)+"px",'');
    tea.rule("height: "+(img.height)+"px",'');
    tea.rule("text-indent: -999em",'');
}

logo.builder = function (data) {
    {
        var w=100,h=100;
        var item = data.builder;
        if (item) {
            var canvas = new Canvas(w = item.bbox.width, h = item.bbox.height);
            var svg_el = teacss.jQuery(item.svg);
            var svg = svg_el;
            for (var key in item.colors) {
                svg.find("."+key).find("path").andSelf().attr("fill",teacss.functions.color(item.colors[key]));
            }
                
            svg = (new XMLSerializer).serializeToString(svg[0]);
            canvas.draw2D(function(ctx){
                ctx.drawSvg(svg,-item.bbox.x,-item.bbox.y);
            });
            canvas.background();
            
            svg_el.find(".heading,.slogan").each(function(){
                var ff = $(this).css("font-family");
                if (ff) {
                    if (!fontdetect.isFontLoaded(ff)) {
                        image.startDeferred();
                        fontdetect.onFontLoaded(ff,function(){
                            image.endDeferred();
                        });
                    }
                }
            });
        }
    }
    tea.rule("background-position: 0 50%",'');
    tea.rule("background-repeat: no-repeat",'');
    tea.rule("width: "+(w)+"px",'');
    tea.rule("height: "+(h)+"px",'');
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/theme/logo.tea
};
teacss.parsed[_root_+"theme/list.tea"] = {func:(function(){with (teacss.functions){
global.bullet = type_mixin();
bullet.default = function (data) {
    data = data || {};
    var h = data.size || 18;
    var w = h;
    var indent = data.indent || 0.2;
    var padding = w * (1 + indent);
    
    tea.rule("list-style: none",'');
    tea.rule("margin-left: 0",'');
    tea.rule("padding-left: "+(padding)+"px",'');
    
    fontAwesome();
    
    tea.rule("li",function(){
        tea.rule("position: relative",'');
        tea.rule("> *:first-child:before",function(){
            tea.rule("font-family: FontAwesome",'');
            tea.rule("font-weight: normal",'');
            tea.rule("font-style: normal",'');
            tea.rule("font-size: "+(h)+"px",'');
            tea.rule("content: \""+(fontAwesome.map[data.symbol || "play-sign"])+"\"",'');
            tea.rule("color: "+(color(data.color)),'');
        
            tea.rule("position: relative",'');
            tea.rule("display: inline-block",'');
            tea.rule("vertical-align: middle",'');

            tea.rule("width: "+(w)+"px",'');
            tea.rule("height: 0",'');
            
            tea.rule("left: "+(-padding)+"px",'');
            tea.rule("top: "+(-h/2)+"px",'');
            
            tea.rule("line-height: "+(h)+"px",'');
            tea.rule("margin-right: "+(-w)+"px",'');
        });
    });
}

bullet.image = function (data) {

    data = data || {};
    var img = image(data.image);
    var h = img.height;
    var w = img.width / (img.height || 1) * h;
    var indent = data.indent || 0.2;
    var padding = w * (1 + indent);
    
    tea.rule("list-style: none",'');        
    tea.rule("margin: 0",'');
    tea.rule("padding-left: "+(padding)+"px",'');
    
    tea.rule("li",function(){
        tea.rule("position: relative",'');
        tea.rule("> *:first-child:before",function(){
            tea.rule("position: relative",'');
            tea.rule("content: \"\"",'');
            tea.rule("display: inline-block",'');
            tea.rule("vertical-align: middle",'');
            tea.rule("width: "+(w)+"px",'');
            tea.rule("height: "+(h)+"px",'');
            
            tea.rule("left: "+(-padding)+"px",'');
            tea.rule("top: "+(-h/2)+"px",'');
            
            tea.rule("margin-right: "+(-w)+"px",'');
            tea.rule("margin-bottom: "+(-h)+"px",'');
            
            if (img.src)
                tea.rule("background: url("+(img.src)+") no-repeat 0 0",'');
            tea.rule("background-size: contain",'');
        });
    });
}


global.list = type_mixin("ul");
list.default = function (data) {
    {
        data = data || {};
        var itemMargin = data.itemMargin || "1em";
    }

    tea.rule("ul",function(){
        bullet.call(this, data.bullet);
        tea.rule("li",function(){
            tea.rule("margin-bottom: "+(itemMargin),'');
        });
    });
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/theme/list.tea
};
teacss.parsed[_root_+"theme/top_menu.tea"] = {func:(function(){with (teacss.functions){
global.top_menu = type_mixin(".top_menu");

top_menus = function (data) {
    eachComponent("menu", function(cmp,id){
        tea.rule("#"+(id)+"",function(){
            top_menu.call(this, data[id] || {});
        });
    })
}

top_menu.base = function (data) {
    data = data || {};
    tea.rule("> ul",function(){
        tea.rule("margin: 0",'');
        tea.rule("padding: 0",'');
    
        tea.rule("> li",function(){
            tea.rule("small",function(){
                tea.rule("display: block",'');
                tea.rule("font-size: 0.85em",'');
            });
            
            if (data.item_width && data.item_width!="auto")
                tea.rule("width: "+(data.item_width),'');
        });
    });
}

top_menu.default = function (data) {

    top_menu.base.call(this, data);
    { 
        if (data.inverse) {
            var bg = "#1b1b1b";
            var border = "#252525";
            var bgActive = "#111";
            var shadowActive = false;
            var color = "#999";
            var colorHover = "#fff";
            var colorActive = "#fff";
        } else {
            var bg = "white";
            var border = "#d4d4d4";
            var bgActive = "#e5e5e5";
            var shadowActive = "0 3px 8px rgba(0, 0, 0, 0.125) inset";
            var color = "#777";
            var colorHover = "#333";
            var colorActive = "#555";
        }
    }
    
    tea.rule("border: 1px solid "+(border),'');
    tea.rule("background-color: "+(bg),'');
    
    if (data.expand) {
        tea.rule("border-left: none",'');
        tea.rule("border-right: none",'');
    } else {
        tea.rule("border-radius: 4px",'');
        tea.rule("padding: 0 20px",'');
    }
    
    tea.rule("> ul",function(){
        tea.rule("> li",function(){
            tea.rule("display: inline-block",'');
            tea.rule("> a",function(){
                tea.rule("font-size: 1.2em",'');
                tea.rule("display: inline-block",'');
                tea.rule("padding: 1.0em 1.5em",'');
                tea.rule("text-decoration: none",'');
                tea.rule("color: "+(color),'');
                
                tea.rule("&:hover",function(){
                    tea.rule("color: "+(colorHover),'');
                });
            });
        });
        
        tea.rule("> li.current-menu-item",function(){
            tea.rule("> a",function(){
                tea.rule("background-color: "+(bgActive),'');
                if (shadowActive)
                    tea.rule("box-shadow: "+(shadowActive),'');
                tea.rule("color: "+(colorActive),'');
            });
        });        
    
        tea.rule("ul",function(){
            tea.rule("display: none",'');
        });
    });
}

top_menu.text = function (data) {
    top_menu.base.call(this, data);
    tea.rule("font-size: 1.3em",'');
    
    tea.rule("> ul",function(){ 
        tea.rule("list-style: none",'');
        
        tea.rule("> li",function(){
            tea.rule("display: inline-block",'');
            tea.rule("padding: 2em 0.5em",'');                        
            
            tea.rule(":hover",function(){
                tea.rule("text-decoration: none",'');
                tea.rule("color: "+(color(1,9)),'');
            });
        });
        
        tea.rule(".current-menu-item",function(){
            tea.rule("border-top: 3px solid "+(color(1,8)),'');
            tea.rule("a",function(){
                tea.rule("color: "+(color(1,8)),'');
            });
        });        
    
        tea.rule("ul",function(){
            tea.rule("display: none",'');
        });
    });
}

top_menu.metro = function (data) {

    top_menu.base.call(this, data);

    var bg = color(data.background || "#333");
    var inverse = lightness(bg)<70;
    tea.rule("background: "+(bg),'');

    tea.rule("> ul",function(){
        tea.rule("> li",function(){
            tea.rule("display: inline-block",'');
            tea.rule("padding: 1.5em 1.0em",'');
            tea.rule("> a",function(){
                tea.rule("font-size: 1.2em",'');
                tea.rule("color: "+(inverse ? 'white' : 'black'),'');
            });
        });
        
        tea.rule("> li.current-menu-item",function(){
            tea.rule("background: "+(inverse ? lighten(bg,10) : darken(bg,10)),''); 
        });
        
        tea.rule("ul",function(){
            tea.rule("display: none",'');
        });
    });
}

top_menu.apple = function (data) {

    top_menu.base.call(this, data);

    var bg = color(data.background || "#333");
    var inverse = lightness(bg)<40;
    var bg_top = lighten(bg,20);
    gradient.vertical.call(this, bg_top,bg);    
    
    tea.rule("> ul",function(){
        tea.rule("> li",function(){
            tea.rule("display: block",'');
            tea.rule("float: left",'');
            tea.rule("> a",function(){
                tea.rule("font-size: 1.2em",'');
                tea.rule("padding: 1.2em 1.5em",'');
                tea.rule("text-decoration: none",'');
                tea.rule("display: block",'');
                
                if (inverse) {
                    tea.rule("color: white",'');
                    tea.rule("text-shadow: 0 0 0.5px #777",'');
                } else {
                    tea.rule("color: black",'');
                    tea.rule("text-shadow: 0 0 0.5px #777",'');
                }
                tea.rule("border-right: 1px solid "+(lighten(bg,10)),'');
            });
            tea.rule("border-right: 1px solid "+(darken(bg,10)),'');
            
            tea.rule("&:first-child",function(){
                // border-left: 1px solid @lighten(bg,10);
                tea.rule("> a",function(){
                    // border-left: 1px solid @darken(bg,10);
                });
            });
        });
        
        tea.rule("> li:hover",function(){
            gradient.vertical.call(this, lighten(bg_top,3),lighten(bg,3));
        });
        
        tea.rule("> li.current-menu-item",function(){
            if (inverse) {
                gradient.vertical.call(this, "#fff","#eee");
                tea.rule("a",function(){ 
                    tea.rule("color: black",'');
                });
            } else {
                gradient.vertical.call(this, darken(bg,20),darken(bg_top,20));
                tea.rule("a",function(){ 
                    tea.rule("color: white",'');
                });
            }
        });
        
        tea.rule("ul",function(){
            tea.rule("display: none",'');
        });
    });    
}


}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/theme/top_menu.tea
};
teacss.parsed[_root_+"theme/smart_heading.tea"] = {func:(function(){with (teacss.functions){
headingStyle = function (data) {
    data = data || {};
    
    tea.rule("font-weight: normal",'');
    tea.rule("b",function(){
        tea.rule("font-weight: normal",'');
    });
    
    if (data.font)
        tea.rule("font-family: "+(data.font),'');
        
    if (data.fontSize)
        tea.rule("font-size: "+(data.fontSize),'');
        
    if (data.color)
        tea.rule("color: "+(color(data.color)),'');
}
}})//# sourceURL=http://uxcandy.com/~boomyjee/templater/lib/modules/core/style/tea/theme/smart_heading.tea
};teacss.parsed[_root_+"bake.tea"].func();